{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1yvhzTmLnQnQMbpk1sLWg-rMmP7h_vETp","timestamp":1735912451525}],"authorship_tag":"ABX9TyPSMjPrxqHblXUgq0YNQW+C"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"26b236eb6ac246f0a6f9beaad497e15d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_51c9972152da40c7b9314a39a03920f9","IPY_MODEL_8066ad98c5ae405397ff02417456051f","IPY_MODEL_b07e27aef9e945f7b811b49f59676a7d"],"layout":"IPY_MODEL_cfa50689379f4c998394bccc0eebf4df"}},"51c9972152da40c7b9314a39a03920f9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_17f3dd4ef5d047ee91a73c38357314a4","placeholder":"​","style":"IPY_MODEL_df00bdde28334c87936389c6d60efe01","value":"model.safetensors: 100%"}},"8066ad98c5ae405397ff02417456051f":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_4e006a2cf30845d5aab3dd78e8763f8c","max":88216496,"min":0,"orientation":"horizontal","style":"IPY_MODEL_7d7d4d837db849108babb604c400a6be","value":88216496}},"b07e27aef9e945f7b811b49f59676a7d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_05d148afaa57408cb84e5bd87401e00e","placeholder":"​","style":"IPY_MODEL_29e6e0820ff943eba845a131befddd0d","value":" 88.2M/88.2M [00:00&lt;00:00, 224MB/s]"}},"cfa50689379f4c998394bccc0eebf4df":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"17f3dd4ef5d047ee91a73c38357314a4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"df00bdde28334c87936389c6d60efe01":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"4e006a2cf30845d5aab3dd78e8763f8c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7d7d4d837db849108babb604c400a6be":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"05d148afaa57408cb84e5bd87401e00e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"29e6e0820ff943eba845a131befddd0d":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Cmeft3V9EmQk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736153199020,"user_tz":-180,"elapsed":25664,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"0930eb05-93b8-4980-8baf-4f8f93762e19","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, Dataset, random_split\n","from torchvision import transforms, models\n","import pandas as pd\n","from PIL import Image\n","from sklearn.metrics import f1_score, confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","from torchvision.models import vit_b_16, ViT_B_16_Weights\n","from timm import create_model\n","\n","\n","\n","\n","# Define the dataset class\n","class AUDataset(Dataset):\n","    def __init__(self, csv_file, image_dir, transform=None):\n","        self.data = pd.read_csv(csv_file)\n","        self.image_dir = image_dir\n","        self.transform = transform\n","        self.data['fname'] = self.data['fname'].astype(str)\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        img_name = os.path.join(self.image_dir, self.data.iloc[idx]['fname'])\n","        image = Image.open(img_name).convert(\"RGB\")\n","        labels = torch.tensor(self.data.iloc[idx, 1:].values.astype('float32'))\n","\n","        if self.transform:\n","            image = self.transform(image)\n","\n","        return image, labels\n","\n","# Define the DeiT model\n","class AUModel(nn.Module):\n","    def __init__(self, num_aus):\n","        super(AUModel, self).__init__()\n","        self.base_model = create_model('deit_small_patch16_224', pretrained=True)\n","        self.base_model.head = nn.Linear(self.base_model.head.in_features, num_aus)\n","\n","    def forward(self, x):\n","        return self.base_model(x)\n","\n","# Training function\n","def train_model(model, train_loader, val_loader, test_loader, optimizer, criterion, num_epochs=10):\n","    best_val_f1 = 0.0\n","    best_model_state = None\n","\n","    for epoch in range(num_epochs):\n","        # Training phase\n","        model.train()\n","        train_loss, train_preds, train_labels = 0, [], []\n","        for inputs, labels in train_loader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","\n","            train_loss += loss.item()\n","            train_preds.extend(torch.sigmoid(outputs).cpu().detach().numpy() > 0.5)\n","            train_labels.extend(labels.cpu().numpy())\n","\n","        train_f1 = f1_score(train_labels, train_preds, average='macro')\n","\n","        # Validation phase\n","        model.eval()\n","        val_loss, val_preds, val_labels = 0, [], []\n","        with torch.no_grad():\n","            for inputs, labels in val_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                loss = criterion(outputs, labels)\n","                val_loss += loss.item()\n","                val_preds.extend(torch.sigmoid(outputs).cpu().numpy() > 0.5)\n","                val_labels.extend(labels.cpu().numpy())\n","\n","        val_f1 = f1_score(val_labels, val_preds, average='macro')\n","\n","        # Test phase\n","        test_preds, test_labels = [], []\n","        with torch.no_grad():\n","            for inputs, labels in test_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                test_preds.extend(torch.sigmoid(outputs).cpu().numpy() > 0.5)\n","                test_labels.extend(labels.cpu().numpy())\n","\n","        test_f1 = f1_score(test_labels, test_preds, average='macro')\n","\n","        print(f\"Epoch {epoch+1}/{num_epochs}, Train F1: {train_f1:.4f}, Val F1: {val_f1:.4f}, Test F1: {test_f1:.4f}\")\n","\n","        # Save best model based on validation F1 score\n","        if val_f1 > best_val_f1:\n","            best_val_f1 = val_f1\n","            best_model_state = model.state_dict()\n","\n","    model.load_state_dict(best_model_state)\n","    return model\n","\n","# Confusion matrix display function\n","def plot_confusion_matrix(true_labels, predictions, classes):\n","    cm = confusion_matrix(true_labels, predictions)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","    disp.plot(cmap=plt.cm.Blues)\n","    plt.show()\n","\n","# File paths\n","train_csv_files = [\n","    'drive/My Drive/tez/train_new/CAFE_AU_labels_strat_fold_0.csv',\n","    'drive/My Drive/tez/train_new/CAFE_AU_labels_strat_fold_1.csv',\n","    'drive/My Drive/tez/train_new/CAFE_AU_labels_strat_fold_2.csv',\n","]\n","test_csv_files = [\n","    'drive/My Drive/tez/test_new/CAFE_AU_labels_strat_fold_0.csv',\n","    'drive/My Drive/tez/test_new/CAFE_AU_labels_strat_fold_1.csv',\n","    'drive/My Drive/tez/test_new/CAFE_AU_labels_strat_fold_2.csv',\n","]\n","image_dir = 'drive/My Drive/tez/CroppedFromPhotos'\n","\n","# Read Action Unit columns\n","au_columns = pd.read_csv(train_csv_files[0]).columns[1:]\n","num_aus = len(au_columns)\n","\n","# Data transformations\n","transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","])\n","\n","# Loss function and device\n","criterion = nn.BCEWithLogitsLoss()\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Initialize model\n","best_model = None\n","all_predictions = []\n","\n","# Iterate through each train-test pair\n","for train_csv, test_csv in zip(train_csv_files, test_csv_files):\n","    # Create datasets\n","    full_train_dataset = AUDataset(train_csv, image_dir, transform=transform)\n","    test_dataset = AUDataset(test_csv, image_dir, transform=transform)\n","\n","    # Split train dataset into train and validation sets\n","    train_size = int(0.8 * len(full_train_dataset))\n","    val_size = len(full_train_dataset) - train_size\n","    train_dataset, val_dataset = random_split(full_train_dataset, [train_size, val_size])\n","\n","    # Create data loaders\n","    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","    val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n","    test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n","\n","    # Initialize the Vision Transformer model\n","    model = AUModel(num_aus).to(device)\n","    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","\n","    # Train the model\n","    model = train_model(model, train_loader, val_loader, test_loader, optimizer, criterion, num_epochs=10)\n","\n","    # Evaluate on the test dataset\n","    test_preds, test_labels = [], []\n","    with torch.no_grad():\n","        for inputs, labels in test_loader:\n","            inputs = inputs.to(device)\n","            outputs = torch.sigmoid(model(inputs))\n","            test_preds.extend(outputs.cpu().numpy() > 0.5)\n","            test_labels.extend(labels.cpu().numpy())\n","\n","    # Save predictions\n","    fold_predictions = pd.DataFrame(test_preds, columns=au_columns)\n","    fold_predictions['fname'] = test_dataset.data['fname'].iloc[:len(test_preds)].values\n","    all_predictions.append(fold_predictions)\n","\n","\n","# Combine and save all predictions\n","final_predictions = pd.concat(all_predictions, ignore_index=True)\n","final_predictions.to_csv('all_test_predictions_with_val.csv', index=False)\n","\n","print(\"Training complete. Predictions saved to all_test_predictions_with_val.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["26b236eb6ac246f0a6f9beaad497e15d","51c9972152da40c7b9314a39a03920f9","8066ad98c5ae405397ff02417456051f","b07e27aef9e945f7b811b49f59676a7d","cfa50689379f4c998394bccc0eebf4df","17f3dd4ef5d047ee91a73c38357314a4","df00bdde28334c87936389c6d60efe01","4e006a2cf30845d5aab3dd78e8763f8c","7d7d4d837db849108babb604c400a6be","05d148afaa57408cb84e5bd87401e00e","29e6e0820ff943eba845a131befddd0d"]},"executionInfo":{"status":"ok","timestamp":1736157067820,"user_tz":-180,"elapsed":3868802,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"154ed7ea-d751-444d-8502-f75d5f2618d0","id":"jS0-6FCzsTk6"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/88.2M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"26b236eb6ac246f0a6f9beaad497e15d"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/10, Train F1: 0.0981, Val F1: 0.1051, Test F1: 0.0535\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 2/10, Train F1: 0.2065, Val F1: 0.2563, Test F1: 0.2813\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 3/10, Train F1: 0.4364, Val F1: 0.2970, Test F1: 0.3727\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 4/10, Train F1: 0.5387, Val F1: 0.4901, Test F1: 0.5384\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 5/10, Train F1: 0.6325, Val F1: 0.4530, Test F1: 0.5023\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 6/10, Train F1: 0.7151, Val F1: 0.5117, Test F1: 0.5505\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 7/10, Train F1: 0.8525, Val F1: 0.4798, Test F1: 0.5171\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 8/10, Train F1: 0.9662, Val F1: 0.5237, Test F1: 0.5524\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 9/10, Train F1: 0.9859, Val F1: 0.4756, Test F1: 0.5069\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 10/10, Train F1: 1.0000, Val F1: 0.4743, Test F1: 0.5318\n","Epoch 1/10, Train F1: 0.0971, Val F1: 0.2357, Test F1: 0.2335\n","Epoch 2/10, Train F1: 0.2610, Val F1: 0.2112, Test F1: 0.2447\n","Epoch 3/10, Train F1: 0.3979, Val F1: 0.2812, Test F1: 0.3509\n","Epoch 4/10, Train F1: 0.4952, Val F1: 0.4159, Test F1: 0.4460\n","Epoch 5/10, Train F1: 0.5631, Val F1: 0.4924, Test F1: 0.5059\n","Epoch 6/10, Train F1: 0.7836, Val F1: 0.3300, Test F1: 0.4161\n","Epoch 7/10, Train F1: 0.7586, Val F1: 0.4856, Test F1: 0.4542\n","Epoch 8/10, Train F1: 0.9285, Val F1: 0.3421, Test F1: 0.4656\n","Epoch 9/10, Train F1: 0.9510, Val F1: 0.4664, Test F1: 0.4781\n","Epoch 10/10, Train F1: 0.9545, Val F1: 0.4701, Test F1: 0.4798\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/10, Train F1: 0.0939, Val F1: 0.0000, Test F1: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 2/10, Train F1: 0.1424, Val F1: 0.2329, Test F1: 0.1907\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 3/10, Train F1: 0.4026, Val F1: 0.3094, Test F1: 0.3170\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 4/10, Train F1: 0.5808, Val F1: 0.4812, Test F1: 0.5146\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 5/10, Train F1: 0.6333, Val F1: 0.4371, Test F1: 0.4728\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 6/10, Train F1: 0.6960, Val F1: 0.4410, Test F1: 0.4823\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 7/10, Train F1: 0.8779, Val F1: 0.5224, Test F1: 0.5041\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 8/10, Train F1: 0.9675, Val F1: 0.4907, Test F1: 0.5401\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 9/10, Train F1: 0.9792, Val F1: 0.5406, Test F1: 0.5148\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 10/10, Train F1: 0.9947, Val F1: 0.5376, Test F1: 0.5210\n","Training complete. Predictions saved to all_test_predictions_with_val.csv\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","import torch\n","import numpy as np\n","\n","# Confusion matrix display function for subplot\n","def plot_confusion_matrix_subplot(true_labels, predictions, classes, ax):\n","    cm = confusion_matrix(true_labels, predictions)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","    disp.plot(cmap=plt.cm.Blues, ax=ax)\n","    ax.set_title(f'Confusion Matrix')\n","\n","# Test phase to collect predictions and true labels\n","test_preds, test_labels = [], []\n","model.eval()  # Set the model to evaluation mode\n","with torch.no_grad():\n","    for inputs, labels in test_loader:\n","        inputs = inputs.to(device)\n","        outputs = torch.sigmoid(model(inputs))  # Sigmoid output for multi-label classification\n","        preds = (outputs > 0.5).cpu().numpy()  # Apply threshold of 0.5 for binary classification\n","\n","        # Collect predictions and true labels\n","        test_preds.extend(preds)\n","        test_labels.extend(labels.cpu().numpy())\n","\n","# Convert to numpy arrays for sklearn compatibility\n","test_preds = np.array(test_preds)\n","test_labels = np.array(test_labels)\n","\n","# Set up subplot grid (4 columns)\n","num_classes = test_preds.shape[1]\n","ncols = 4\n","nrows = (num_classes + ncols - 1) // ncols  # Calculate number of rows needed\n","\n","fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(16, nrows * 4))\n","axes = axes.flatten()  # Flatten the axes array for easier indexing\n","\n","# Plot confusion matrices in subplots\n","for i in range(num_classes):\n","    ax = axes[i]\n","    plot_confusion_matrix_subplot(test_labels[:, i], test_preds[:, i], classes=[0, 1], ax=ax)\n","\n","    # Adjust titles for each subplot\n","    ax.set_title(f'Class: {au_columns[i]}')\n","\n","# Remove any unused subplots\n","for j in range(num_classes, len(axes)):\n","    axes[j].axis('off')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"XYMcGAtAEmm_","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1736157089685,"user_tz":-180,"elapsed":21869,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"401e9cd5-1f5f-46d8-aebe-dbf3635ca5c2"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x1200 with 23 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Compute metrics for each Action Unit (AU)\n","results = []  # To store metrics for each AU\n","\n","for i in range(test_preds.shape[1]):  # Loop through each AU\n","    true_positive = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 1))  # True positives\n","    false_positive = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 1))  # False positives\n","    false_negative = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 0))  # False negatives\n","    true_negative = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 0))  # True negatives\n","\n","    total_samples = true_positive + false_positive + false_negative + true_negative  # Total samples for the AU\n","\n","    results.append({\n","        \"AU\": au_columns[i],\n","        \"Total Samples\": total_samples,\n","        \"Correctly Predicted\": true_positive + true_negative,\n","        \"False Positives\": false_positive,\n","        \"False Negatives\": false_negative,\n","    })\n","\n","# Convert results to a DataFrame for better visualization\n","results_df = pd.DataFrame(results)\n","\n","# Print the results as a table\n","print(results_df)\n","\n","# Optionally, save the results to a CSV file\n","results_df.to_csv(\"AU_metrics_total.csv\", index=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XMLIR1ejbu2i","executionInfo":{"status":"ok","timestamp":1736157089685,"user_tz":-180,"elapsed":14,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"8407e963-30d2-408a-8ead-3b38e52dfaa6"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["      AU  Total Samples  Correctly Predicted  False Positives  False Negatives\n","0    AU1            114                   97                9                8\n","1    AU2            114                  111                0                3\n","2    AU3            114                   94                5               15\n","3    AU4            114                  103                6                5\n","4    AU5            114                  107                5                2\n","5    AU6            114                  106                1                7\n","6    AU9            114                  104                1                9\n","7   AU12            114                  100                3               11\n","8   AU20            114                  109                0                5\n","9   AU26            114                  114                0                0\n","10  AU28            114                  110                0                4\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","\n","# Flatten arrays for global metrics\n","flat_true_labels = test_labels.ravel()\n","flat_pred_labels = test_preds.ravel()\n","\n","# Calculate overall F1 score (macro-average across all AUs)\n","overall_f1 = f1_score(flat_true_labels, flat_pred_labels, average='macro')\n","\n","# Display the overall F1 score\n","print(f\"Overall F1 Score (Macro-Average): {overall_f1:.4f}\")\n"],"metadata":{"id":"sQqbuaCnHhSM","executionInfo":{"status":"ok","timestamp":1736158618279,"user_tz":-180,"elapsed":303,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"31f54254-3ac4-4f91-ee17-800722664962","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Overall F1 Score (Macro-Average): 0.8312\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/tez/train_new/CAFE_AU_labels_strat_fold_0.csv',\n","    'drive/My Drive/tez/train_new/CAFE_AU_labels_strat_fold_1.csv',\n","    'drive/My Drive/tez/train_new/CAFE_AU_labels_strat_fold_2.csv',\n","]\n","\n","# Tüm CSV'leri birleştirin\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('combined_train_data.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"id":"utnDWbvqEmpT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736157089685,"user_tz":-180,"elapsed":12,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"4a0ef388-f6b9-4b8f-d6da-99fe37772729"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 688, Temizlenmiş veri sayısı: 344\n"]}]},{"cell_type":"code","source":["pred = pd.read_csv(\"all_test_predictions_with_val.csv\")\n","actual = pd.read_csv(\"combined_train_data.csv\")\n","pred = pred.replace({True: 1, False: 0})\n","columns = ['fname'] + [col for col in pred.columns if col != 'fname']\n","pred = pred[columns]\n","pred.to_csv('pred.csv', index=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-rsLwxVAbo7b","executionInfo":{"status":"ok","timestamp":1736157089686,"user_tz":-180,"elapsed":12,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"9a57d3b7-ad15-4cbf-a5a7-ae5880e277fe"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-6-31680091bae8>:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  pred = pred.replace({True: 1, False: 0})\n"]}]},{"cell_type":"code","source":["predictions = pd.read_csv(\"pred.csv\")\n","common_rows = pd.merge(predictions, actual)\n","print(f\"Common rows: {len(common_rows)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yaCZ-FoGbo9j","executionInfo":{"status":"ok","timestamp":1736157089686,"user_tz":-180,"elapsed":11,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"409347b3-c15f-4273-9f9c-33bd51ef9773"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Common rows: 169\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"SQBgQQJdkers","executionInfo":{"status":"ok","timestamp":1736157089686,"user_tz":-180,"elapsed":10,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":7,"outputs":[]}]}