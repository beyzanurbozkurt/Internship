{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1VN20JTr6VN3sFTy8LcodWdwCRNsDmbwG","timestamp":1736572354051},{"file_id":"1fwY7bWmE1J1ku19jcDf6SnRH4cRdIsph","timestamp":1736532704848},{"file_id":"1yvhzTmLnQnQMbpk1sLWg-rMmP7h_vETp","timestamp":1735912451525}],"authorship_tag":"ABX9TyM0M4ZXiIpViYAqqFwXQhw7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Cmeft3V9EmQk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736535808720,"user_tz":-180,"elapsed":2873,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"12215934-3143-4d4f-c7a6-5087b09f45a7","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, Dataset, random_split\n","from torchvision import transforms\n","import pandas as pd\n","from PIL import Image\n","from sklearn.metrics import f1_score, confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","from timm import create_model\n","\n","\n","# Define the dataset class\n","class AUDataset(Dataset):\n","    def __init__(self, csv_file, image_dir, transform=None):\n","        self.data = pd.read_csv(csv_file)\n","        self.image_dir = image_dir\n","        self.transform = transform\n","        self.data['fname'] = self.data['fname'].astype(str)\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        img_name = os.path.join(self.image_dir, self.data.iloc[idx]['fname'])\n","        image = Image.open(img_name).convert(\"RGB\")\n","        labels = torch.tensor(self.data.iloc[idx, 3:].values.astype('float32'))  # Assuming label columns start from index 1\n","\n","        if self.transform:\n","            image = self.transform(image)\n","\n","        return image, labels\n","\n","\n","# Define the model using Vision Transformer (DeiT)\n","class AUModel(nn.Module):\n","    def __init__(self, num_aus):\n","        super(AUModel, self).__init__()\n","        self.base_model = create_model('deit_small_patch16_224', pretrained=True)\n","        self.base_model.head = nn.Linear(self.base_model.head.in_features, num_aus)\n","\n","    def forward(self, x):\n","        return self.base_model(x)\n","\n","\n","# Training function\n","def train_model(model, train_loader, val_loader, test_loader, optimizer, criterion, num_epochs=10):\n","    best_val_f1 = 0.0\n","    best_model_state = None\n","\n","    for epoch in range(num_epochs):\n","        # Training phase\n","        model.train()\n","        train_loss, train_preds, train_labels = 0, [], []\n","        for inputs, labels in train_loader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","\n","            train_loss += loss.item()\n","            train_preds.extend(torch.sigmoid(outputs).cpu().detach().numpy() > 0.5)\n","            train_labels.extend(labels.cpu().numpy())\n","\n","        train_f1 = f1_score(train_labels, train_preds, average='macro')\n","\n","        # Validation phase\n","        model.eval()\n","        val_loss, val_preds, val_labels = 0, [], []\n","        with torch.no_grad():\n","            for inputs, labels in val_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                loss = criterion(outputs, labels)\n","                val_loss += loss.item()\n","                val_preds.extend(torch.sigmoid(outputs).cpu().numpy() > 0.5)\n","                val_labels.extend(labels.cpu().numpy())\n","\n","        val_f1 = f1_score(val_labels, val_preds, average='macro')\n","\n","        # Test phase\n","        test_preds, test_labels = [], []\n","        with torch.no_grad():\n","            for inputs, labels in test_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                test_preds.extend(torch.sigmoid(outputs).cpu().numpy() > 0.5)\n","                test_labels.extend(labels.cpu().numpy())\n","\n","        test_f1 = f1_score(test_labels, test_preds, average='macro')\n","\n","        print(f\"Epoch {epoch+1}/{num_epochs}, Train F1: {train_f1:.4f}, Val F1: {val_f1:.4f}, Test F1: {test_f1:.4f}\")\n","\n","        # Save best model based on validation F1 score\n","        if val_f1 > best_val_f1:\n","            best_val_f1 = val_f1\n","            best_model_state = model.state_dict()\n","\n","    model.load_state_dict(best_model_state)\n","    return model\n","\n","\n","# Confusion matrix display function\n","def plot_confusion_matrix(true_labels, predictions, classes):\n","    cm = confusion_matrix(true_labels, predictions)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","    disp.plot(cmap=plt.cm.Blues)\n","    plt.show()\n","\n","\n","# File paths\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","test_csv_files = [\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","image_dir = 'drive/My Drive/TIF/CroppedFromPhotos/TIF_DB_Augmented'\n","\n","# Define Action Unit columns\n","au_columns = ['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']\n","num_aus = len(au_columns)\n","\n","# Data transformations\n","transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","])\n","\n","# Loss function and device\n","criterion = nn.BCEWithLogitsLoss()\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Initialize model\n","best_model = None\n","all_predictions = []\n","\n","# Iterate through each train-test pair\n","for train_csv, test_csv in zip(train_csv_files, test_csv_files):\n","    # Create datasets\n","    full_train_dataset = AUDataset(train_csv, image_dir, transform=transform)\n","    test_dataset = AUDataset(test_csv, image_dir, transform=transform)\n","\n","    # Split train dataset into train and validation sets\n","    train_size = int(0.8 * len(full_train_dataset))\n","    val_size = len(full_train_dataset) - train_size\n","    train_dataset, val_dataset = random_split(full_train_dataset, [train_size, val_size])\n","\n","    # Create data loaders\n","    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","    val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n","    test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n","\n","    # Initialize the Vision Transformer model\n","    model = AUModel(num_aus).to(device)\n","    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","\n","    # Train the model\n","    model = train_model(model, train_loader, val_loader, test_loader, optimizer, criterion, num_epochs=10)\n","\n","    # Evaluate on the test dataset\n","    test_preds, test_labels = [], []\n","    with torch.no_grad():\n","        for inputs, labels in test_loader:\n","            inputs = inputs.to(device)\n","            outputs = torch.sigmoid(model(inputs))\n","            test_preds.extend(outputs.cpu().numpy() > 0.5)\n","            test_labels.extend(labels.cpu().numpy())\n","\n","    # Save predictions\n","    fold_predictions = pd.DataFrame(test_preds, columns=au_columns)\n","    fold_predictions['fname'] = test_dataset.data['fname'].iloc[:len(test_preds)].values\n","    all_predictions.append(fold_predictions)\n","\n","\n","# Combine and save all predictions\n","final_predictions = pd.concat(all_predictions, ignore_index=True)\n","final_predictions.to_csv('all_test_predictions_with_val.csv', index=False)\n","\n","print(\"Training complete. Predictions saved to all_test_predictions_with_val.csv\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736551574045,"user_tz":-180,"elapsed":11094455,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"727a71aa-51f3-4e38-eac0-53af49330319","id":"jS0-6FCzsTk6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10, Train F1: 0.5101, Val F1: 0.7330, Test F1: 0.5775\n","Epoch 2/10, Train F1: 0.8127, Val F1: 0.8437, Test F1: 0.5809\n","Epoch 3/10, Train F1: 0.9452, Val F1: 0.9186, Test F1: 0.5685\n","Epoch 4/10, Train F1: 0.9848, Val F1: 0.9558, Test F1: 0.6007\n","Epoch 5/10, Train F1: 0.9990, Val F1: 0.9774, Test F1: 0.5991\n","Epoch 6/10, Train F1: 0.9993, Val F1: 0.9833, Test F1: 0.6165\n","Epoch 7/10, Train F1: 1.0000, Val F1: 0.9808, Test F1: 0.6114\n","Epoch 8/10, Train F1: 1.0000, Val F1: 0.9842, Test F1: 0.6153\n","Epoch 9/10, Train F1: 1.0000, Val F1: 0.9860, Test F1: 0.6175\n","Epoch 10/10, Train F1: 1.0000, Val F1: 0.9860, Test F1: 0.6167\n","Epoch 1/10, Train F1: 0.4405, Val F1: 0.6524, Test F1: 0.5091\n","Epoch 2/10, Train F1: 0.7277, Val F1: 0.7481, Test F1: 0.5653\n","Epoch 3/10, Train F1: 0.8742, Val F1: 0.9094, Test F1: 0.5593\n","Epoch 4/10, Train F1: 0.9686, Val F1: 0.9522, Test F1: 0.6093\n","Epoch 5/10, Train F1: 0.9942, Val F1: 0.9509, Test F1: 0.5929\n","Epoch 6/10, Train F1: 0.9990, Val F1: 0.9774, Test F1: 0.6002\n","Epoch 7/10, Train F1: 1.0000, Val F1: 0.9791, Test F1: 0.5897\n","Epoch 8/10, Train F1: 1.0000, Val F1: 0.9759, Test F1: 0.5911\n","Epoch 9/10, Train F1: 1.0000, Val F1: 0.9771, Test F1: 0.5869\n","Epoch 10/10, Train F1: 1.0000, Val F1: 0.9749, Test F1: 0.5887\n","Epoch 1/10, Train F1: 0.4049, Val F1: 0.5499, Test F1: 0.5658\n","Epoch 2/10, Train F1: 0.7471, Val F1: 0.7898, Test F1: 0.6382\n","Epoch 3/10, Train F1: 0.9235, Val F1: 0.8761, Test F1: 0.6627\n","Epoch 4/10, Train F1: 0.9856, Val F1: 0.9351, Test F1: 0.6703\n","Epoch 5/10, Train F1: 0.9964, Val F1: 0.9705, Test F1: 0.6804\n","Epoch 6/10, Train F1: 0.9998, Val F1: 0.9797, Test F1: 0.6605\n","Epoch 7/10, Train F1: 1.0000, Val F1: 0.9811, Test F1: 0.6732\n","Epoch 8/10, Train F1: 1.0000, Val F1: 0.9803, Test F1: 0.6678\n","Epoch 9/10, Train F1: 1.0000, Val F1: 0.9789, Test F1: 0.6638\n","Epoch 10/10, Train F1: 1.0000, Val F1: 0.9811, Test F1: 0.6673\n","Training complete. Predictions saved to all_test_predictions_with_val.csv\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","import torch\n","import numpy as np\n","\n","# Confusion matrix display function for subplot\n","def plot_confusion_matrix_subplot(true_labels, predictions, classes, ax):\n","    cm = confusion_matrix(true_labels, predictions)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","    disp.plot(cmap=plt.cm.Blues, ax=ax)\n","    ax.set_title(f'Confusion Matrix')\n","\n","# Test phase to collect predictions and true labels\n","test_preds, test_labels = [], []\n","model.eval()  # Set the model to evaluation mode\n","with torch.no_grad():\n","    for inputs, labels in test_loader:\n","        inputs = inputs.to(device)\n","        outputs = torch.sigmoid(model(inputs))  # Sigmoid output for multi-label classification\n","        preds = (outputs > 0.5).cpu().numpy()  # Apply threshold of 0.5 for binary classification\n","\n","        # Collect predictions and true labels\n","        test_preds.extend(preds)\n","        test_labels.extend(labels.cpu().numpy())\n","\n","# Convert to numpy arrays for sklearn compatibility\n","test_preds = np.array(test_preds)\n","test_labels = np.array(test_labels)\n","\n","# Set up subplot grid (4 columns)\n","num_classes = test_preds.shape[1]\n","ncols = 4\n","nrows = (num_classes + ncols - 1) // ncols  # Calculate number of rows needed\n","\n","fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(16, nrows * 4))\n","axes = axes.flatten()  # Flatten the axes array for easier indexing\n","\n","# Plot confusion matrices in subplots\n","for i in range(num_classes):\n","    ax = axes[i]\n","    plot_confusion_matrix_subplot(test_labels[:, i], test_preds[:, i], classes=[0, 1], ax=ax)\n","\n","    # Adjust titles for each subplot\n","    ax.set_title(f'Class: {au_columns[i]}')\n","\n","# Remove any unused subplots\n","for j in range(num_classes, len(axes)):\n","    axes[j].axis('off')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"XYMcGAtAEmm_","colab":{"base_uri":"https://localhost:8080/","height":403},"executionInfo":{"status":"ok","timestamp":1736551649759,"user_tz":-180,"elapsed":75273,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"6f834900-5d85-48ca-c057-b0424ec20844"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x800 with 16 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Epoch 1/10, Train F1: 0.5101, Val F1: 0.7330, Test F1: 0.5775\n","Epoch 2/10, Train F1: 0.8127, Val F1: 0.8437, Test F1: 0.5809\n","Epoch 3/10, Train F1: 0.9452, Val F1: 0.9186, Test F1: 0.5685\n","Epoch 4/10, Train F1: 0.9848, Val F1: 0.9558, Test F1: 0.6007\n","Epoch 5/10, Train F1: 0.9990, Val F1: 0.9774, Test F1: 0.5991\n","Epoch 6/10, Train F1: 0.9993, Val F1: 0.9833, Test F1: 0.6165\n","Epoch 7/10, Train F1: 1.0000, Val F1: 0.9808, Test F1: 0.6114\n","Epoch 8/10, Train F1: 1.0000, Val F1: 0.9842, Test F1: 0.6153\n","Epoch 9/10, Train F1: 1.0000, Val F1: 0.9860, Test F1: 0.6175\n","Epoch 10/10, Train F1: 1.0000, Val F1: 0.9860, Test F1: 0.6167\n","Epoch 1/10, Train F1: 0.4405, Val F1: 0.6524, Test F1: 0.5091\n","Epoch 2/10, Train F1: 0.7277, Val F1: 0.7481, Test F1: 0.5653\n","Epoch 3/10, Train F1: 0.8742, Val F1: 0.9094, Test F1: 0.5593\n","Epoch 4/10, Train F1: 0.9686, Val F1: 0.9522, Test F1: 0.6093\n","Epoch 5/10, Train F1: 0.9942, Val F1: 0.9509, Test F1: 0.5929\n","Epoch 6/10, Train F1: 0.9990, Val F1: 0.9774, Test F1: 0.6002\n","Epoch 7/10, Train F1: 1.0000, Val F1: 0.9791, Test F1: 0.5897\n","Epoch 8/10, Train F1: 1.0000, Val F1: 0.9759, Test F1: 0.5911"],"metadata":{"id":"hvwC-mNsNkL_"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Compute metrics for each Action Unit (AU)\n","results = []  # To store metrics for each AU\n","\n","for i in range(test_preds.shape[1]):  # Loop through each AU\n","    true_positive = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 1))  # True positives\n","    false_positive = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 1))  # False positives\n","    false_negative = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 0))  # False negatives\n","    true_negative = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 0))  # True negatives\n","\n","    total_samples = true_positive + false_positive + false_negative + true_negative  # Total samples for the AU\n","\n","    results.append({\n","        \"AU\": au_columns[i],\n","        \"Total Samples\": total_samples,\n","        \"Correctly Predicted\": true_positive + true_negative,\n","        \"False Positives\": false_positive,\n","        \"False Negatives\": false_negative,\n","    })\n","\n","# Convert results to a DataFrame for better visualization\n","results_df = pd.DataFrame(results)\n","\n","# Print the results as a table\n","print(results_df)\n","\n","# Optionally, save the results to a CSV file\n","results_df.to_csv(\"AU_metrics_total.csv\", index=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":256},"id":"XMLIR1ejbu2i","executionInfo":{"status":"error","timestamp":1736572170645,"user_tz":-180,"elapsed":779,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"7f2144fc-8286-4f52-82c4-9481f6affbb2"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'test_preds' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-3962f0fff7b1>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# To store metrics for each AU\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_preds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Loop through each AU\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0mtrue_positive\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtest_preds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# True positives\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0mfalse_positive\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtest_preds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# False positives\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'test_preds' is not defined"]}]},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","\n","# Flatten arrays for global metrics\n","flat_true_labels = test_labels.ravel()\n","flat_pred_labels = test_preds.ravel()\n","\n","# Calculate overall F1 score (macro-average across all AUs)\n","overall_f1 = f1_score(flat_true_labels, flat_pred_labels, average='macro')\n","\n","# Display the overall F1 score\n","print(f\"Overall F1 Score (Macro-Average): {overall_f1:.4f}\")\n"],"metadata":{"id":"sQqbuaCnHhSM","executionInfo":{"status":"ok","timestamp":1736551649760,"user_tz":-180,"elapsed":16,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"28f4cac7-eaae-4234-d1fe-4bab8558037c","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Overall F1 Score (Macro-Average): 0.7797\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","\n","# Tüm CSV'leri birleştirin\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('combined_train_data_tif.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"id":"utnDWbvqEmpT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736551649761,"user_tz":-180,"elapsed":12,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"d0b36b9d-fe07-4efe-a9e6-8c79ef2854e7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 2340, Temizlenmiş veri sayısı: 1170\n"]}]},{"cell_type":"code","source":["pred = pd.read_csv(\"all_test_predictions_with_val.csv\")\n","actual = pd.read_csv(\"combined_train_data_tif.csv\")\n","pred = pred.replace({True: 1, False: 0})\n","columns = ['fname'] + [col for col in pred.columns if col != 'fname']\n","pred = pred[columns]\n","pred.to_csv('pred.csv', index=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-rsLwxVAbo7b","executionInfo":{"status":"ok","timestamp":1736551649762,"user_tz":-180,"elapsed":9,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"5abc64c3-7ff7-4364-a64a-8aa3a941df6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-12-ce5656259ed3>:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  pred = pred.replace({True: 1, False: 0})\n"]}]},{"cell_type":"code","source":["predictions = pd.read_csv(\"pred.csv\")\n","common_rows = pd.merge(predictions, actual)\n","print(f\"Common rows: {len(common_rows)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yaCZ-FoGbo9j","executionInfo":{"status":"ok","timestamp":1736551649773,"user_tz":-180,"elapsed":2,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"33ddda45-8895-4b9a-b2df-7573f5222214"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Common rows: 212\n","Common rows: 212\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","pred = pd.read_csv(\"all_test_predictions_with_val.csv\")\n","pred.head()"],"metadata":{"id":"SQBgQQJdkers","colab":{"base_uri":"https://localhost:8080/","height":353},"executionInfo":{"status":"error","timestamp":1736572335874,"user_tz":-180,"elapsed":258,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"3f9d7b14-816e-45a3-9ed4-38e628305c5f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'all_test_predictions_with_val.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-54521667e971>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"all_test_predictions_with_val.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'all_test_predictions_with_val.csv'"]}]}]}