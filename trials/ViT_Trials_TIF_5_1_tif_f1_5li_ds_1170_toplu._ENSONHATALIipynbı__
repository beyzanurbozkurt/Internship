{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"18Y3WKqcUkspk7YjIFL-Qvz7859jAyIxe","timestamp":1743260465026},{"file_id":"11SuVQ05G6aR8XSFFjSQ1j51U039xf0lD","timestamp":1743065014259},{"file_id":"16ONbhCpBIugEus-0NDuEmNS9nSxDN36F","timestamp":1742992819930},{"file_id":"1AloRl52cNazasV63_aSOX8pyWzYBL42y","timestamp":1742976614638},{"file_id":"1Gz_dN7QsUktnnLowFZPOeJQuOHcQJxVl","timestamp":1736572404570},{"file_id":"1VN20JTr6VN3sFTy8LcodWdwCRNsDmbwG","timestamp":1736545982113},{"file_id":"1fwY7bWmE1J1ku19jcDf6SnRH4cRdIsph","timestamp":1736532704848},{"file_id":"1yvhzTmLnQnQMbpk1sLWg-rMmP7h_vETp","timestamp":1735912451525}],"authorship_tag":"ABX9TyOEmo06iltTjN6+MWuJvVch"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"07b029b4b3e9446e8c8e660111728195":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_8f774a3f225648f1b4c991f4da7e2c29","IPY_MODEL_81de6ed8926d41b0adb216104cf457ef","IPY_MODEL_b78679032d7442b2994db53a094b7ef7"],"layout":"IPY_MODEL_02ba8f0e7d8a4925ba813be4a1be0b50"}},"8f774a3f225648f1b4c991f4da7e2c29":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_784f038fab624f558ec05a5acbf3724a","placeholder":"​","style":"IPY_MODEL_773ab59bdeca45a0ae984968356d60b1","value":"model.safetensors: 100%"}},"81de6ed8926d41b0adb216104cf457ef":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_82a31010d55542fa90fa3eaab39dc415","max":88216496,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5ba63b4cb05c43aeb9edaebb94b8c8db","value":88216496}},"b78679032d7442b2994db53a094b7ef7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_82786a93ebd64d5bb245d260401f7706","placeholder":"​","style":"IPY_MODEL_a2d0076aa2324828b99cc74ef4b1ae1e","value":" 88.2M/88.2M [00:00&lt;00:00, 141MB/s]"}},"02ba8f0e7d8a4925ba813be4a1be0b50":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"784f038fab624f558ec05a5acbf3724a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"773ab59bdeca45a0ae984968356d60b1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"82a31010d55542fa90fa3eaab39dc415":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5ba63b4cb05c43aeb9edaebb94b8c8db":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"82786a93ebd64d5bb245d260401f7706":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a2d0076aa2324828b99cc74ef4b1ae1e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","\n","# File paths\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","test_csv_files = [\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","\n","# Satır sayılarını belirle\n","train_sample_sizes = [40, 30, 25]  # t1: 20, t2: 30, t3: 15\n","test_sample_sizes = [5, 15, 20]  # v1: 10, v2: 15, v3: 5\n","\n","# Küçük CSV'leri oluştur\n","for i, (train_csv, test_csv) in enumerate(zip(train_csv_files, test_csv_files)):\n","    train_df = pd.read_csv(train_csv).head(train_sample_sizes[i])\n","    test_df = pd.read_csv(test_csv).head(test_sample_sizes[i])\n","\n","    # Yeni dosya isimleri\n","    train_sample_csv = f'drive/My Drive/TIF/sample_train_fold_{i}.csv'\n","    test_sample_csv = f'drive/My Drive/TIF/sample_test_fold_{i}.csv'\n","\n","    # Kaydet\n","    train_df.to_csv(train_sample_csv, index=False)\n","    test_df.to_csv(test_sample_csv, index=False)\n","\n","    print(f\"Küçük CSV'ler oluşturuldu: {train_sample_csv}, {test_sample_csv}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"INafc28AokLr","executionInfo":{"status":"ok","timestamp":1743260982076,"user_tz":-180,"elapsed":3251,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"63470248-ae56-4484-9a9f-f6c9cdd21931"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Küçük CSV'ler oluşturuldu: drive/My Drive/TIF/sample_train_fold_0.csv, drive/My Drive/TIF/sample_test_fold_0.csv\n","Küçük CSV'ler oluşturuldu: drive/My Drive/TIF/sample_train_fold_1.csv, drive/My Drive/TIF/sample_test_fold_1.csv\n","Küçük CSV'ler oluşturuldu: drive/My Drive/TIF/sample_train_fold_2.csv, drive/My Drive/TIF/sample_test_fold_2.csv\n"]}]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, Dataset, random_split\n","from torchvision import transforms\n","import pandas as pd\n","from PIL import Image\n","from sklearn.metrics import f1_score, confusion_matrix\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from timm import create_model\n","from sklearn.metrics import multilabel_confusion_matrix"],"metadata":{"id":"5n4Iewox-1QQ","executionInfo":{"status":"ok","timestamp":1744193494256,"user_tz":-180,"elapsed":45987,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"id":"Cmeft3V9EmQk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744193510403,"user_tz":-180,"elapsed":16137,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"a258c6ed-9707-4f80-fd6b-fac566536a71"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, Dataset, random_split\n","from torchvision import transforms\n","import pandas as pd\n","from PIL import Image\n","from sklearn.metrics import f1_score\n","import numpy as np\n","from timm import create_model\n","\n","# Define AU columns\n","au_columns = ['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']\n","num_aus = len(au_columns)\n","\n","# Dataset Class\n","class AUDataset(Dataset):\n","    def __init__(self, csv_file, image_dir, transform=None):\n","        self.data = pd.read_csv(csv_file)\n","        self.image_dir = image_dir\n","        self.transform = transform\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        img_path = os.path.join(self.image_dir, str(self.data.iloc[idx]['fname']))\n","        image = Image.open(img_path).convert(\"RGB\")\n","        labels = torch.tensor(self.data.iloc[idx][au_columns].values.astype('float32'))\n","        if self.transform:\n","            image = self.transform(image)\n","        return image, labels\n","\n","# Model Class (same as before)\n","class AUModel(nn.Module):\n","    def __init__(self, num_aus, dropout_rate=0.5):\n","        super(AUModel, self).__init__()\n","        self.base_model = create_model('deit_small_patch16_224', pretrained=True)\n","        self.base_model.head = nn.Linear(self.base_model.head.in_features, num_aus)\n","        self.dropout = nn.Dropout(dropout_rate)\n","\n","    def forward(self, x):\n","        x = self.base_model(x)\n","        x = self.dropout(x)\n","        return x\n","\n","# Training Function (same as before)\n","def train_model(model, train_loader, val_loader, optimizer, criterion, num_epochs=10):\n","    best_val_f1 = 0.0\n","    best_model_state = model.state_dict()\n","    for epoch in range(num_epochs):\n","        model.train()\n","        train_loss = 0.0\n","        for inputs, labels in train_loader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","            train_loss += loss.item()\n","\n","        model.eval()\n","        val_preds, val_labels = [], []\n","        val_loss = 0.0\n","        with torch.no_grad():\n","            for inputs, labels in val_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                loss = criterion(outputs, labels)\n","                val_loss += loss.item()\n","                val_preds.extend(torch.sigmoid(outputs).cpu().numpy())\n","                val_labels.extend(labels.cpu().numpy())\n","\n","        val_preds_binary = np.array(val_preds) > 0.5\n","        val_labels_binary = np.array(val_labels) > 0.5\n","        val_f1 = f1_score(val_labels_binary, val_preds_binary, average='macro', zero_division=0)\n","        if val_f1 >= best_val_f1:\n","            best_val_f1 = val_f1\n","            best_model_state = model.state_dict()\n","\n","    model.load_state_dict(best_model_state)\n","    return model, best_val_f1\n","\n","\n","# File paths\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","test_csv_files = [\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","\n","# File Paths\n","train_csv_files = [f'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_{i}.csv' for i in range(3)]\n","test_csv_files = [f'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_{i}.csv' for i in range(3)]\n","full_csv_file = 'tif_train.csv'  # Path to your full dataset\n","image_dir = 'drive/My Drive/TIF/CroppedFromPhotos/TIF_DB_Augmented'\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","])\n","criterion = nn.BCEWithLogitsLoss()\n","all_predictions, all_fnames = [], []\n","fold_f1_scores = []\n","\n","# 1. Train on each fold and collect predictions for full dataset\n","for fold, (train_csv, test_csv) in enumerate(zip(train_csv_files, test_csv_files)):\n","    print(f\"Processing Fold {fold+1}\")\n","\n","    # Load training data for this fold\n","    train_dataset = AUDataset(train_csv, image_dir, transform)\n","    train_size = int(0.8 * len(train_dataset))\n","    val_size = len(train_dataset) - train_size\n","    train_subset, val_subset = random_split(train_dataset, [train_size, val_size])\n","    train_loader = DataLoader(train_subset, batch_size=32, shuffle=True)\n","    val_loader = DataLoader(val_subset, batch_size=32, shuffle=False)\n","\n","    # Load full dataset for prediction\n","    full_dataset = AUDataset(full_csv_file, image_dir, transform)\n","    full_loader = DataLoader(full_dataset, batch_size=32, shuffle=False)\n","\n","    # Initialize and train model\n","    model = AUModel(num_aus).to(device)\n","    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","    model, fold_f1 = train_model(model, train_loader, val_loader, optimizer, criterion, num_epochs=10)\n","    fold_f1_scores.append(fold_f1)\n","\n","    # Predict on full dataset\n","    fold_predictions = []\n","    model.eval()\n","    with torch.no_grad():\n","        for inputs, _ in full_loader:\n","            inputs = inputs.to(device)\n","            outputs = torch.sigmoid(model(inputs)).cpu().numpy()\n","            fold_predictions.extend(outputs)\n","\n","    # Store predictions for this fold\n","    all_predictions.append(fold_predictions)\n","    if fold == 0:  # Only need to store filenames once\n","        all_fnames = full_dataset.data['fname'].tolist()\n","\n","# 2. Process predictions (average across folds and remove duplicates)\n","all_predictions = np.array(all_predictions)  # Shape: (3 folds, num_samples, num_aus)\n","avg_predictions = np.mean(all_predictions, axis=0)  # Average across folds\n","\n","# Create DataFrame with predictions using the actual AU column names\n","results_dict = {'fname': all_fnames}\n","for i, au in enumerate(au_columns):\n","    results_dict[f'{au}_prob'] = avg_predictions[:, i]\n","    results_dict[f'{au}_pred'] = (avg_predictions[:, i] > 0.5).astype(int)\n","\n","results_df = pd.DataFrame(results_dict)\n","\n","# Remove duplicates (keep first occurrence)\n","results_df = results_df.drop_duplicates(subset=['fname'])\n","\n","# 3. Save final results\n","results_df.to_csv(\"final_predictions_averaged.csv\", index=False)\n","print(f\"Average F1 scores across folds: {np.mean(fold_f1_scores):.4f}\")\n","print(\"Final predictions saved with duplicates removed.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":240,"referenced_widgets":["07b029b4b3e9446e8c8e660111728195","8f774a3f225648f1b4c991f4da7e2c29","81de6ed8926d41b0adb216104cf457ef","b78679032d7442b2994db53a094b7ef7","02ba8f0e7d8a4925ba813be4a1be0b50","784f038fab624f558ec05a5acbf3724a","773ab59bdeca45a0ae984968356d60b1","82a31010d55542fa90fa3eaab39dc415","5ba63b4cb05c43aeb9edaebb94b8c8db","82786a93ebd64d5bb245d260401f7706","a2d0076aa2324828b99cc74ef4b1ae1e"]},"id":"wqAGD4eG-_7Q","outputId":"d4e6d755-414e-428a-f9f4-af4338c39bcb","executionInfo":{"status":"ok","timestamp":1744204548698,"user_tz":-180,"elapsed":10915848,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Processing Fold 1\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/88.2M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"07b029b4b3e9446e8c8e660111728195"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Processing Fold 2\n","Processing Fold 3\n","Average F1 scores across folds: 0.9792\n","Final predictions saved with duplicates removed.\n"]}]},{"cell_type":"code","source":["full_dataset = AUDataset(full_csv_file, image_dir, transform)\n","print(f\"Dataset uzunluğu: {len(full_dataset)}\")\n","import pandas as pd\n","df = pd.read_csv(full_csv_file)\n","print(df.head())\n","print(f\"{len(df)} satır yüklendi.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_gJ7_fyxytbD","executionInfo":{"status":"ok","timestamp":1744206280255,"user_tz":-180,"elapsed":120,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"30753b66-d933-4f40-c4eb-b0fb33523909"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset uzunluğu: 1170\n","   Unnamed: 0 subject                      fname  AU1  AU2  AU3  AU4  AU6  \\\n","0         144   A04M6  A04M6-JTP-4669SA-DI_0.png  1.0  0.0  1.0  1.0  1.0   \n","1         145   A04M6  A04M6-JTP-4669SA-DI_1.png  1.0  0.0  1.0  1.0  1.0   \n","2         146   A04M6  A04M6-JTP-4669SA-DI_2.png  1.0  0.0  1.0  1.0  1.0   \n","3         147   A04M6  A04M6-JTP-4669SA-DI_3.png  1.0  0.0  1.0  1.0  1.0   \n","4         148   A04M6  A04M6-JTP-4669SA-DI_4.png  1.0  0.0  1.0  1.0  1.0   \n","\n","   AU9  AU12  AU20  \n","0  1.0   0.0   1.0  \n","1  1.0   0.0   1.0  \n","2  1.0   0.0   1.0  \n","3  1.0   0.0   1.0  \n","4  1.0   0.0   1.0  \n","1170 satır yüklendi.\n"]}]},{"cell_type":"code","source":["sample_image, sample_label = full_dataset[0]\n","print(\"Görüntü boyutu:\", sample_image.shape)\n","print(\"Etiket:\", sample_label)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QS71Mbf8y_sJ","executionInfo":{"status":"ok","timestamp":1744206300115,"user_tz":-180,"elapsed":52,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"80f13bc0-4bb6-41f7-d076-86520945702e"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Görüntü boyutu: torch.Size([3, 224, 224])\n","Etiket: tensor([1., 0., 1., 1., 1., 1., 0., 1.])\n"]}]},{"cell_type":"code","source":["# Eğitimde kullanılan dosyaların listesini topla\n","train_fnames = set()\n","for train_csv in train_csv_files:\n","    df = pd.read_csv(train_csv)\n","    train_fnames.update(df['fname'].tolist())\n","\n","# Tahmin yapılan verideki dosya isimlerini oku\n","full_df = pd.read_csv(full_csv_file)\n","full_fnames = set(full_df['fname'].tolist())\n","\n","# Ortak olanları bul\n","common = train_fnames.intersection(full_fnames)\n","\n","print(f\"Eğitim ve full dataset arasında {len(common)} ortak örnek var.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6o9GvvWOzKR-","executionInfo":{"status":"ok","timestamp":1744206343182,"user_tz":-180,"elapsed":74,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"6bda728f-b2b2-406b-fdf6-f4b34d5373eb"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Eğitim ve full dataset arasında 1170 ortak örnek var.\n"]}]},{"cell_type":"code","source":["au_columns = ['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']"],"metadata":{"id":"bpVuFN_yQZRh","executionInfo":{"status":"ok","timestamp":1744204548703,"user_tz":-180,"elapsed":10,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# ... (önceki kodun aynısı) ...\n","\n","# 3. Save final results\n","results_df.to_csv(\"final_predictions_averaged.csv\", index=False)\n","print(f\"Average F1 scores across folds: {np.mean(fold_f1_scores):.4f}\")\n","print(\"Final predictions saved with duplicates removed.\")\n","\n","# 4. Confusion Matrix Visualization\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Gerçek ve tahmin edilen değerleri hazırla\n","y_true = full_dataset.data[au_columns].values\n","y_pred = (avg_predictions > 0.5).astype(int)\n","\n","# Her bir AU için confusion matrix oluştur\n","for i, au in enumerate(au_columns):\n","    cm = confusion_matrix(y_true[:, i], y_pred[:, i])\n","\n","    plt.figure(figsize=(6, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=['Negatif', 'Pozitif'],\n","                yticklabels=['Negatif', 'Pozitif'])\n","    plt.title(f'{au} Confusion Matrix')\n","    plt.ylabel('Gerçek Değer')\n","    plt.xlabel('Tahmin Edilen Değer')\n","\n","    # Kaydet\n","    plt.savefig(f'confusion_matrix_{au}.png', bbox_inches='tight', dpi=300)\n","    plt.close()\n","\n","    print(f\"{au} için Confusion Matrix kaydedildi: confusion_matrix_{au}.png\")\n","\n","# Tüm AU'lar için genel confusion matrix (macro)\n","plt.figure(figsize=(10, 8))\n","all_cm = confusion_matrix(y_true.ravel(), y_pred.ravel())\n","sns.heatmap(all_cm, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=['Negatif', 'Pozitif'],\n","            yticklabels=['Negatif', 'Pozitif'])\n","plt.title('Tüm AU\\'lar için Genel Confusion Matrix')\n","plt.ylabel('Gerçek Değer')\n","plt.xlabel('Tahmin Edilen Değer')\n","plt.savefig('confusion_matrix_all_AUs.png', bbox_inches='tight', dpi=300)\n","plt.close()\n","\n","print(\"Tüm AU'lar için genel Confusion Matrix kaydedildi: confusion_matrix_all_AUs.png\")"],"metadata":{"id":"XYMcGAtAEmm_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744204551750,"user_tz":-180,"elapsed":3054,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"207cf18f-0e56-467b-c66e-502a2b62be21"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Average F1 scores across folds: 0.9792\n","Final predictions saved with duplicates removed.\n","AU1 için Confusion Matrix kaydedildi: confusion_matrix_AU1.png\n","AU2 için Confusion Matrix kaydedildi: confusion_matrix_AU2.png\n","AU3 için Confusion Matrix kaydedildi: confusion_matrix_AU3.png\n","AU4 için Confusion Matrix kaydedildi: confusion_matrix_AU4.png\n","AU6 için Confusion Matrix kaydedildi: confusion_matrix_AU6.png\n","AU9 için Confusion Matrix kaydedildi: confusion_matrix_AU9.png\n","AU12 için Confusion Matrix kaydedildi: confusion_matrix_AU12.png\n","AU20 için Confusion Matrix kaydedildi: confusion_matrix_AU20.png\n","Tüm AU'lar için genel Confusion Matrix kaydedildi: confusion_matrix_all_AUs.png\n"]}]},{"cell_type":"code","source":["# Her bir AU için confusion matrix oluştur\n","for i, au in enumerate(au_columns):\n","    cm = confusion_matrix(y_true[:, i], y_pred[:, i])\n","\n","    # Confusion Matrix'i terminalde yazdır\n","    print(f\"\\n{au} için Confusion Matrix (sayısal):\")\n","    print(cm)\n","    tn, fp, fn, tp = cm.ravel()\n","    print(f\"TN: {tn}, FP: {fp}, FN: {fn}, TP: {tp}\")\n","\n","    # Görsel olarak çiz\n","    plt.figure(figsize=(6, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=['Negatif', 'Pozitif'],\n","                yticklabels=['Negatif', 'Pozitif'])\n","    plt.title(f'{au} Confusion Matrix')\n","    plt.ylabel('Gerçek Değer')\n","    plt.xlabel('Tahmin Edilen Değer')\n","    plt.savefig(f'confusion_matrix_{au}.png', bbox_inches='tight', dpi=300)\n","    plt.close()\n","\n","    print(f\"{au} için Confusion Matrix kaydedildi: confusion_matrix_{au}.png\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JizVP0lVxS-l","executionInfo":{"status":"ok","timestamp":1744205892391,"user_tz":-180,"elapsed":7022,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"55de090d-8465-4e4d-8e46-5aaa4a5c1bcb"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","AU1 için Confusion Matrix (sayısal):\n","[[540   0]\n"," [  1 629]]\n","TN: 540, FP: 0, FN: 1, TP: 629\n","AU1 için Confusion Matrix kaydedildi: confusion_matrix_AU1.png\n","\n","AU2 için Confusion Matrix (sayısal):\n","[[927   0]\n"," [  9 234]]\n","TN: 927, FP: 0, FN: 9, TP: 234\n","AU2 için Confusion Matrix kaydedildi: confusion_matrix_AU2.png\n","\n","AU3 için Confusion Matrix (sayısal):\n","[[581   4]\n"," [ 20 565]]\n","TN: 581, FP: 4, FN: 20, TP: 565\n","AU3 için Confusion Matrix kaydedildi: confusion_matrix_AU3.png\n","\n","AU4 için Confusion Matrix (sayısal):\n","[[772   2]\n"," [  9 387]]\n","TN: 772, FP: 2, FN: 9, TP: 387\n","AU4 için Confusion Matrix kaydedildi: confusion_matrix_AU4.png\n","\n","AU6 için Confusion Matrix (sayısal):\n","[[448   2]\n"," [  0 720]]\n","TN: 448, FP: 2, FN: 0, TP: 720\n","AU6 için Confusion Matrix kaydedildi: confusion_matrix_AU6.png\n","\n","AU9 için Confusion Matrix (sayısal):\n","[[963   0]\n"," [  0 207]]\n","TN: 963, FP: 0, FN: 0, TP: 207\n","AU9 için Confusion Matrix kaydedildi: confusion_matrix_AU9.png\n","\n","AU12 için Confusion Matrix (sayısal):\n","[[808   2]\n"," [  4 356]]\n","TN: 808, FP: 2, FN: 4, TP: 356\n","AU12 için Confusion Matrix kaydedildi: confusion_matrix_AU12.png\n","\n","AU20 için Confusion Matrix (sayısal):\n","[[594   0]\n"," [  0 576]]\n","TN: 594, FP: 0, FN: 0, TP: 576\n","AU20 için Confusion Matrix kaydedildi: confusion_matrix_AU20.png\n"]}]},{"cell_type":"code","source":["# Tüm AU'lar için genel confusion matrix (macro)\n","all_cm = confusion_matrix(y_true.ravel(), y_pred.ravel())\n","\n","# Sayısal olarak yazdır\n","print(\"\\nTüm AU'lar için Genel Confusion Matrix (sayısal):\")\n","print(all_cm)\n","tn, fp, fn, tp = all_cm.ravel()\n","print(f\"TN: {tn}, FP: {fp}, FN: {fn}, TP: {tp}\")\n","\n","# Görsel olarak çiz\n","plt.figure(figsize=(10, 8))\n","sns.heatmap(all_cm, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=['Negatif', 'Pozitif'],\n","            yticklabels=['Negatif', 'Pozitif'])\n","plt.title('Tüm AU\\'lar için Genel Confusion Matrix')\n","plt.ylabel('Gerçek Değer')\n","plt.xlabel('Tahmin Edilen Değer')\n","plt.savefig('confusion_matrix_all_AUs.png', bbox_inches='tight', dpi=300)\n","plt.close()\n","\n","print(\"Tüm AU'lar için genel Confusion Matrix kaydedildi: confusion_matrix_all_AUs.png\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pZOzkZPExcO_","executionInfo":{"status":"ok","timestamp":1744205899006,"user_tz":-180,"elapsed":818,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"74bebdcc-df2e-423b-defc-8fe615377b3b"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Tüm AU'lar için Genel Confusion Matrix (sayısal):\n","[[5633   10]\n"," [  43 3674]]\n","TN: 5633, FP: 10, FN: 43, TP: 3674\n","Tüm AU'lar için genel Confusion Matrix kaydedildi: confusion_matrix_all_AUs.png\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Compute metrics for each Action Unit (AU)\n","results = []  # To store metrics for each AU\n","\n","for i in range(test_preds.shape[1]):  # Loop through each AU\n","    true_positive = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 1))  # True positives\n","    false_positive = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 1))  # False positives\n","    false_negative = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 0))  # False negatives\n","    true_negative = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 0))  # True negatives\n","\n","    total_samples = true_positive + false_positive + false_negative + true_negative  # Total samples for the AU\n","\n","    # Calculate Recall (True Positive Rate)\n","    recall = true_positive / (true_positive + false_negative) if (true_positive + false_negative) > 0 else 0\n","\n","    results.append({\n","        \"AU\": au_columns[i],\n","        \"Total Samples\": total_samples,\n","        \"Correctly Predicted\": true_positive + true_negative,\n","        \"Wrong Prediction\": false_positive + false_negative,\n","        \"Recall (%)\": recall * 100  # Recall as a percentage\n","    })\n","\n","# Convert results to a DataFrame for better visualization\n","results_df = pd.DataFrame(results)\n","\n","# Print the results as a table\n","print(results_df)\n","\n","# Optionally, save the results to a CSV file\n","results_df.to_csv(\"AU_metrics_total.csv\", index=False)"],"metadata":{"id":"XMLIR1ejbu2i","executionInfo":{"status":"error","timestamp":1744204551919,"user_tz":-180,"elapsed":162,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"colab":{"base_uri":"https://localhost:8080/","height":211},"outputId":"1f2c015e-d0c4-465e-bd1e-d7d6cb0d72a9"},"execution_count":7,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'test_preds' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-4a18bb9bb497>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# To store metrics for each AU\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_preds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Loop through each AU\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0mtrue_positive\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtest_preds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# True positives\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0mfalse_positive\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtest_preds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# False positives\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'test_preds' is not defined"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# CSV dosyasını oku\n","df = pd.read_csv(\"tif_train.csv\")\n","\n","# AU2 sütununda kaç tane 1 var?\n","au2_count = df['AU1'].sum()\n","\n","print(f\"AU2 sütununda {au2_count} tane 1 var.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wnJD7uW5xuFl","executionInfo":{"status":"ok","timestamp":1744206029813,"user_tz":-180,"elapsed":34,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"a2b2993c-e1b3-473a-9ce0-2645c69de3c5"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["AU2 sütununda 630.0 tane 1 var.\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","\n","# Convert to numpy arrays and apply threshold\n","test_labels_array = np.array(test_labels) > 0.5\n","test_preds_array = np.array(test_preds) > 0.5\n","\n","# Calculate overall F1 score (macro-average across all AUs)\n","overall_f1 = f1_score(test_labels_array, test_preds_array, average='macro')\n","\n","# Display the overall F1 score\n","print(f\"Overall F1 Score (Macro-Average): {overall_f1:.4f}\")"],"metadata":{"id":"sQqbuaCnHhSM","executionInfo":{"status":"error","timestamp":1744206053720,"user_tz":-180,"elapsed":46,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"colab":{"base_uri":"https://localhost:8080/","height":211},"outputId":"72070da4-fbd6-49d0-ba88-47b59055b780"},"execution_count":12,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'test_labels' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-06c852e2e388>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Convert to numpy arrays and apply threshold\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mtest_labels_array\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_labels\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mtest_preds_array\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_preds\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'test_labels' is not defined"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","\n","# Tüm CSV'leri birleştirin\n","\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('combined_train_data_tif.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"id":"utnDWbvqEmpT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742994932634,"user_tz":-180,"elapsed":31,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"af41e811-157d-42fe-a08c-af7e239f6795"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 2340, Temizlenmiş veri sayısı: 1170\n"]}]},{"cell_type":"code","source":["pred = pd.read_csv(\"all_test_predictions_with_val.csv\")\n","actual = pd.read_csv(\"combined_train_data_tif.csv\")\n","pred = pred.replace({True: 1, False: 0})\n","columns = ['fname'] + [col for col in pred.columns if col != 'fname']\n","pred = pred[columns]\n","pred.to_csv('pred.csv', index=False)"],"metadata":{"id":"-rsLwxVAbo7b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742994932668,"user_tz":-180,"elapsed":30,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"231bae5c-5208-47c5-df4e-17b10482876e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-ce5656259ed3>:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  pred = pred.replace({True: 1, False: 0})\n"]}]},{"cell_type":"code","source":["predictions = pd.read_csv(\"pred.csv\")\n","common_rows = pd.merge(predictions, actual)\n","print(f\"Common rows: {len(common_rows)}\")"],"metadata":{"id":"yaCZ-FoGbo9j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742994932701,"user_tz":-180,"elapsed":29,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"c26b6386-1921-4773-d57c-5e912ce3d5a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Common rows: 99\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","# Tüm CSV'leri birleştirin\n","\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('tif_train.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AKd_hbLQEuKg","executionInfo":{"status":"ok","timestamp":1743164395054,"user_tz":-180,"elapsed":89,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"4483e7cd-3d16-43b7-eb00-877b4b0f1d22"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 1170, Temizlenmiş veri sayısı: 1170\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","# Tüm CSV'leri birleştirin\n","\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('tif_test.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vOaecIwFsav3","executionInfo":{"status":"ok","timestamp":1743164417387,"user_tz":-180,"elapsed":70,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"5c0cbe42-ff6d-421e-dad3-86a674483cb2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 2340, Temizlenmiş veri sayısı: 1170\n"]}]},{"cell_type":"code","source":["final_predictions.to_csv('/content/drive/My Drive/TIF/all_test_predictions_with_val.csv', index=False)\n"],"metadata":{"id":"SQBgQQJdkers"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","import os\n","\n","# Google Drive'ı bağlayın\n","drive.mount('/content/drive')\n","\n","# Fotoğrafları saymak istediğiniz klasör yolu\n","folder_path = 'drive/My Drive/TIF/CroppedFromPhotos/TIF_DB_Augmented'  # Kendi klasör yolunuzu yazın\n","\n","# Desteklenen resim formatları\n","image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff']\n","\n","# Klasördeki resimleri say\n","image_count = 0\n","for root, dirs, files in os.walk(folder_path):\n","    for file in files:\n","        if any(file.lower().endswith(ext) for ext in image_extensions):\n","            image_count += 1\n","\n","print(f\"Klasör ve alt klasörlerde toplam {image_count} resim dosyası bulundu.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"55ChCVtfgXt-","executionInfo":{"status":"ok","timestamp":1742986471658,"user_tz":-180,"elapsed":2063,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"20f6bd05-b79f-47e0-c1e9-caf53e1742bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Klasör ve alt klasörlerde toplam 1179 resim dosyası bulundu.\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# CSV dosyasını oku\n","df = pd.read_csv(\"/content/drive/My Drive/TIF/all_test_predictions_with_val.csv\")  # CSV dosyanızın adını yazın\n","\n","# AU sütunlarını belirle\n","au_columns = ['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']\n","\n","# True/False değerlerini 1/0'a dönüştür\n","for col in au_columns:\n","    df[col] = df[col].astype(int)  # True->1, False->0'a dönüşür\n","\n","# Değiştirilmiş veriyi yeni bir CSV dosyasına kaydet\n","df.to_csv('yeni_dosya_adı.csv', index=False)\n","\n","print(\"Dönüştürme tamamlandı. Yeni dosya oluşturuldu.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X8ZIcDLvFuAl","executionInfo":{"status":"ok","timestamp":1742986893715,"user_tz":-180,"elapsed":25,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"243cde05-2c6a-4d32-aa37-8eb6a5a7f806"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dönüştürme tamamlandı. Yeni dosya oluşturuldu.\n"]}]},{"cell_type":"code","source":["df = pd.read_csv('yeni_dosya_adı.csv')\n"],"metadata":{"id":"Tdt8fGMWHKDu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["1016+1106+1178"],"metadata":{"id":"D7W-cxrjHd-g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df[['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']].sum())  # Pozitif örnek sayılarını gösterir"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6VPHxnKaHeAu","executionInfo":{"status":"ok","timestamp":1742989389730,"user_tz":-180,"elapsed":5,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"6b95f6eb-6ecc-45da-d5e4-86e03b0dcff1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["AU1     621\n","AU2     174\n","AU3     592\n","AU4     429\n","AU6     809\n","AU9     244\n","AU12    378\n","AU20    584\n","dtype: int64\n"]}]},{"cell_type":"code","source":["621/1170\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c50FOhzZHeCx","executionInfo":{"status":"ok","timestamp":1742987176749,"user_tz":-180,"elapsed":7,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"a4248876-1fcd-4be5-b796-141eb963afb3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5307692307692308"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df['AU2'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"xwSJCIaaLxf9","executionInfo":{"status":"ok","timestamp":1742988165908,"user_tz":-180,"elapsed":12,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"9fcd105c-1214-487a-f0fd-b30a1c0dabf3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["AU2\n","0    996\n","1    174\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>AU2</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>996</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>174</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["acsv_files = [\n","    'drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","bcsv_files = [\n","    'drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]"],"metadata":{"id":"Ec4FKBEXWFJM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train dosyalarındaki toplam satır sayısı\n","train_row_counts = []\n","for csv_file in acsv_files:\n","    df = pd.read_csv(csv_file)\n","    train_row_counts.append(len(df))\n","    print(f\"{csv_file}: {len(df)} satır\")\n","\n","total_train_rows = sum(train_row_counts)\n","print(f\"\\nToplam train satır sayısı: {total_train_rows}\")\n","\n","# Test dosyalarındaki toplam satır sayısı\n","test_row_counts = []\n","for csv_file in bcsv_files:\n","    df = pd.read_csv(csv_file)\n","    test_row_counts.append(len(df))\n","    print(f\"{csv_file}: {len(df)} satır\")\n","\n","total_test_rows = sum(test_row_counts)\n","print(f\"\\nToplam test satır sayısı: {total_test_rows}\")\n","\n","# Tüm veri setindeki toplam satır sayısı\n","print(f\"\\nTüm veri setindeki toplam satır sayısı: {total_train_rows + total_test_rows}\")"],"metadata":{"id":"921Rs2pFXWWY","executionInfo":{"status":"ok","timestamp":1742992028696,"user_tz":-180,"elapsed":67,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"ff1ff57b-9855-4f2b-dc9a-d004cb8873e1","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_0.csv: 774 satır\n","drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_1.csv: 783 satır\n","drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_2.csv: 801 satır\n","\n","Toplam train satır sayısı: 2358\n","drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_0.csv: 405 satır\n","drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_1.csv: 396 satır\n","drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_2.csv: 378 satır\n","\n","Toplam test satır sayısı: 1179\n","\n","Tüm veri setindeki toplam satır sayısı: 3537\n"]}]},{"cell_type":"code","source":["801+378"],"metadata":{"id":"hokO-_aSZS4T","executionInfo":{"status":"ok","timestamp":1742991783885,"user_tz":-180,"elapsed":44,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"9fc272f9-f23c-4f9a-ca0e-4ba07f582dad","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1179"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":[],"metadata":{"id":"nippnuQeZz8y"},"execution_count":null,"outputs":[]}]}
