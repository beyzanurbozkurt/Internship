{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"18Y3WKqcUkspk7YjIFL-Qvz7859jAyIxe","timestamp":1743073901197},{"file_id":"11SuVQ05G6aR8XSFFjSQ1j51U039xf0lD","timestamp":1743065014259},{"file_id":"16ONbhCpBIugEus-0NDuEmNS9nSxDN36F","timestamp":1742992819930},{"file_id":"1AloRl52cNazasV63_aSOX8pyWzYBL42y","timestamp":1742976614638},{"file_id":"1Gz_dN7QsUktnnLowFZPOeJQuOHcQJxVl","timestamp":1736572404570},{"file_id":"1VN20JTr6VN3sFTy8LcodWdwCRNsDmbwG","timestamp":1736545982113},{"file_id":"1fwY7bWmE1J1ku19jcDf6SnRH4cRdIsph","timestamp":1736532704848},{"file_id":"1yvhzTmLnQnQMbpk1sLWg-rMmP7h_vETp","timestamp":1735912451525}],"authorship_tag":"ABX9TyMP6C7p40Zn661JZR1Z2kEj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"fe4397d8159042a696c7abc5b37381ad":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_434c31f8b326411086d248373e4c4936","IPY_MODEL_c1b3825112174073ba011102c6f60cc1","IPY_MODEL_9f9552335bb04655af4d0f5698f78bd4"],"layout":"IPY_MODEL_ec6949e64b374fdc861ba7c12a8829e2"}},"434c31f8b326411086d248373e4c4936":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4ec965469a63432089a3bbd698f7004a","placeholder":"​","style":"IPY_MODEL_09bc1381745a48b6bef0a8760e1b650b","value":"model.safetensors: 100%"}},"c1b3825112174073ba011102c6f60cc1":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_c870d99599b94369b30fdfbe0c9df151","max":88216496,"min":0,"orientation":"horizontal","style":"IPY_MODEL_6dbf4561abec459aa9dc53f9adbd3cf1","value":88216496}},"9f9552335bb04655af4d0f5698f78bd4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_964e99060533465a8238fdad4a0ab04d","placeholder":"​","style":"IPY_MODEL_d15c5643a55b47bea2c93612a8f9f8a1","value":" 88.2M/88.2M [00:00&lt;00:00, 175MB/s]"}},"ec6949e64b374fdc861ba7c12a8829e2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4ec965469a63432089a3bbd698f7004a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"09bc1381745a48b6bef0a8760e1b650b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c870d99599b94369b30fdfbe0c9df151":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6dbf4561abec459aa9dc53f9adbd3cf1":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"964e99060533465a8238fdad4a0ab04d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d15c5643a55b47bea2c93612a8f9f8a1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Cmeft3V9EmQk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743074043546,"user_tz":-180,"elapsed":23853,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"57af8891-4483-4ae1-80fe-ece2a7394500"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, Dataset, ConcatDataset, random_split  # random_split eklendi\n","from torchvision import transforms\n","import pandas as pd\n","from PIL import Image\n","from sklearn.metrics import f1_score, confusion_matrix, ConfusionMatrixDisplay\n","import numpy as np\n","from timm import create_model\n","import matplotlib.pyplot as plt\n","\n","# Define dataset class\n","class AUDataset(Dataset):\n","    def __init__(self, csv_file, image_dir, transform=None):\n","        self.data = pd.read_csv(csv_file)\n","        self.image_dir = image_dir\n","        self.transform = transform\n","        self.data['fname'] = self.data['fname'].astype(str)\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        img_name = os.path.join(self.image_dir, self.data.iloc[idx]['fname'])\n","        image = Image.open(img_name).convert(\"RGB\")\n","        labels = torch.tensor(self.data.iloc[idx, 3:].values.astype('float32'))\n","\n","        if self.transform:\n","            image = self.transform(image)\n","\n","        return image, labels\n","\n","# Define the model\n","class AUModel(nn.Module):\n","    def __init__(self, num_aus, dropout_rate=0.5):\n","        super(AUModel, self).__init__()\n","        self.base_model = create_model('deit_small_patch16_224', pretrained=True)\n","        self.dropout = nn.Dropout(dropout_rate)\n","        self.base_model.head = nn.Linear(self.base_model.head.in_features, num_aus)\n","\n","    def forward(self, x):\n","        x = self.base_model.forward_features(x)\n","        x = self.base_model.forward_head(x, pre_logits=True)\n","        x = self.dropout(x)\n","        x = self.base_model.head(x)\n","        return x\n","\n","# Function to train the model\n","def train_model(model, train_loader, val_loader, optimizer, criterion, num_epochs=1):\n","    best_val_f1 = 0.0\n","    best_model_state = None\n","\n","    for epoch in range(num_epochs):\n","        model.train()\n","        for inputs, labels in train_loader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","\n","        model.eval()\n","        val_preds, val_labels = [], []\n","        with torch.no_grad():\n","            for inputs, labels in val_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                val_preds.extend(torch.sigmoid(outputs).cpu().numpy())\n","                val_labels.extend(labels.cpu().numpy())\n","\n","        val_f1 = f1_score(np.array(val_labels) > 0.5, np.array(val_preds) > 0.5, average='macro')\n","\n","        if val_f1 > best_val_f1:\n","            best_val_f1 = val_f1\n","            best_model_state = model.state_dict()\n","\n","    model.load_state_dict(best_model_state)\n","    return model, best_val_f1\n","\n","# File paths\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","test_csv_files = [\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","image_dir = 'drive/My Drive/TIF/CroppedFromPhotos/TIF_DB_Augmented'\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","])\n","criterion = nn.BCEWithLogitsLoss()\n","num_aus = 8\n","\n","# 3-Fold Cross Validation için düzenleme\n","all_folds_predictions = []\n","all_folds_fnames = []\n","all_folds_f1_scores = []\n","\n","for fold in range(3):\n","    print(f\"\\n=== Processing Fold {fold+1}/3 ===\")\n","\n","    # Train için diğer 2 fold'u birleştir\n","    train_folds = [i for i in range(3) if i != fold]\n","    train_datasets = [AUDataset(train_csv_files[i], image_dir, transform) for i in train_folds]\n","    train_dataset = ConcatDataset(train_datasets)\n","\n","    # Test için mevcut fold'u kullan\n","    test_dataset = AUDataset(test_csv_files[fold], image_dir, transform)\n","\n","    # Train setini %80 train, %20 validation olarak ayır\n","    train_size = int(0.8 * len(train_dataset))\n","    val_size = len(train_dataset) - train_size\n","    train_subset, val_subset = random_split(train_dataset, [train_size, val_size])\n","\n","    train_loader = DataLoader(train_subset, batch_size=32, shuffle=True)\n","    val_loader = DataLoader(val_subset, batch_size=32, shuffle=False)\n","    test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n","\n","    # Modeli oluştur ve eğit\n","    model = AUModel(num_aus).to(device)\n","    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","    model, val_f1 = train_model(model, train_loader, val_loader, optimizer, criterion, num_epochs=1)\n","    all_folds_f1_scores.append(val_f1)\n","\n","    # Test setinde tahmin yap\n","    test_preds = []\n","    test_labels = []\n","    fnames = []\n","\n","    with torch.no_grad():\n","        for i, (inputs, labels) in enumerate(test_loader):\n","            inputs = inputs.to(device)\n","            outputs = torch.sigmoid(model(inputs))\n","            test_preds.extend(outputs.cpu().numpy())\n","            test_labels.extend(labels.cpu().numpy())\n","            fnames.extend([test_dataset.data.iloc[i * test_loader.batch_size + j]['fname'] for j in range(len(outputs))])\n","\n","    # Test seti performansını hesapla\n","    test_f1 = f1_score(np.array(test_labels) > 0.5, np.array(test_preds) > 0.5, average='macro')\n","    print(f\"Fold {fold+1} - Validation F1: {val_f1:.4f}, Test F1: {test_f1:.4f}\")\n","\n","    # Tahminleri sakla\n","    fold_predictions = pd.DataFrame(test_preds, columns=[f'AU{i+1}' for i in range(num_aus)])\n","    fold_predictions['fname'] = fnames\n","    all_folds_predictions.append(fold_predictions)\n","\n","# Tüm fold'ların sonuçlarını birleştir\n","final_predictions = pd.concat(all_folds_predictions).sort_values(by='fname')\n","final_predictions.to_csv(\"final_predictions_3fold_cv.csv\", index=False)\n","\n","# Ortalama performansı yazdır\n","print(\"\\n=== Final Results ===\")\n","print(f\"Average Validation F1: {np.mean(all_folds_f1_scores):.4f}\")\n","print(f\"Std Validation F1: {np.std(all_folds_f1_scores):.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":379,"referenced_widgets":["fe4397d8159042a696c7abc5b37381ad","434c31f8b326411086d248373e4c4936","c1b3825112174073ba011102c6f60cc1","9f9552335bb04655af4d0f5698f78bd4","ec6949e64b374fdc861ba7c12a8829e2","4ec965469a63432089a3bbd698f7004a","09bc1381745a48b6bef0a8760e1b650b","c870d99599b94369b30fdfbe0c9df151","6dbf4561abec459aa9dc53f9adbd3cf1","964e99060533465a8238fdad4a0ab04d","d15c5643a55b47bea2c93612a8f9f8a1"]},"outputId":"6fc7a8f9-0243-4d86-a15a-bf538231a0de","id":"jS0-6FCzsTk6","executionInfo":{"status":"ok","timestamp":1743077335813,"user_tz":-180,"elapsed":3126925,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","=== Processing Fold 1/3 ===\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/88.2M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fe4397d8159042a696c7abc5b37381ad"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Fold 1 - Validation F1: 0.7097, Test F1: 0.7482\n","\n","=== Processing Fold 2/3 ===\n","Fold 2 - Validation F1: 0.7424, Test F1: 0.8523\n","\n","=== Processing Fold 3/3 ===\n","Fold 3 - Validation F1: 0.7351, Test F1: 0.7898\n","\n","=== Final Results ===\n","Average Validation F1: 0.7291\n","Std Validation F1: 0.0140\n"]}]},{"cell_type":"code","source":["# Combine and save all predictions\n","final_predictions = pd.concat(all_predictions, ignore_index=True)\n","final_predictions.to_csv('all_test_predictions_with_val.csv', index=False)\n","print(f\"Total predictions saved: {len(final_predictions)}\")\n","print(final_predictions.head())  # İlk birkaç satırı kontrol et\n","print(\"Training complete. Predictions saved to all_test_predictions_with_val_5.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Efkeh_TVt5l","executionInfo":{"status":"ok","timestamp":1743007444224,"user_tz":-180,"elapsed":105,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"7be2ac0f-8f09-4628-db73-ac36966425f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total predictions saved: 1170\n","     AU1    AU2   AU3   AU4   AU6    AU9   AU12  AU20  \\\n","0   True  False  True  True  True  False  False  True   \n","1   True  False  True  True  True  False  False  True   \n","2  False  False  True  True  True  False  False  True   \n","3  False  False  True  True  True  False  False  True   \n","4   True  False  True  True  True  False  False  True   \n","\n","                       fname  \n","0  A04M6-JTP-4669SA-DI_0.png  \n","1  A04M6-JTP-4669SA-DI_1.png  \n","2  A04M6-JTP-4669SA-DI_2.png  \n","3  A04M6-JTP-4669SA-DI_3.png  \n","4  A04M6-JTP-4669SA-DI_4.png  \n","Training complete. Predictions saved to all_test_predictions_with_val_5.csv\n"]}]},{"cell_type":"code","source":["!pip install Pillow"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6Di4dmctFYn_","executionInfo":{"status":"ok","timestamp":1742985793105,"user_tz":-180,"elapsed":3264,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"205c138c-25be-46cf-8846-dc4081505cba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (11.1.0)\n"]}]},{"cell_type":"code","source":["au_columns = ['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']"],"metadata":{"id":"bpVuFN_yQZRh","executionInfo":{"status":"ok","timestamp":1743077393191,"user_tz":-180,"elapsed":39,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","import torch\n","import numpy as np\n","\n","# Confusion matrix display function for subplot\n","def plot_confusion_matrix_subplot(true_labels, predictions, classes, ax):\n","    cm = confusion_matrix(true_labels, predictions)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","    disp.plot(cmap=plt.cm.Blues, ax=ax)\n","    ax.set_title(f'Confusion Matrix')\n","\n","# Test phase to collect predictions and true labels\n","test_preds, test_labels = [], []\n","model.eval()  # Set the model to evaluation mode\n","with torch.no_grad():\n","    for inputs, labels in test_loader:\n","        inputs = inputs.to(device)\n","        outputs = torch.sigmoid(model(inputs))  # Sigmoid output for multi-label classification\n","        preds = (outputs > 0.5).cpu().numpy()  # Apply threshold of 0.5 for binary classification\n","\n","        # Collect predictions and true labels\n","        test_preds.extend(preds)\n","        test_labels.extend(labels.cpu().numpy())\n","\n","# Convert to numpy arrays for sklearn compatibility\n","test_preds = np.array(test_preds)\n","test_labels = np.array(test_labels)\n","\n","# Set up subplot grid (4 columns)\n","num_classes = test_preds.shape[1]\n","ncols = 4\n","nrows = (num_classes + ncols - 1) // ncols  # Calculate number of rows needed\n","\n","fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(16, nrows * 4))\n","axes = axes.flatten()  # Flatten the axes array for easier indexing\n","\n","# Plot confusion matrices in subplots\n","for i in range(num_classes):\n","    ax = axes[i]\n","    plot_confusion_matrix_subplot(test_labels[:, i], test_preds[:, i], classes=[0, 1], ax=ax)\n","\n","    # Adjust titles for each subplot\n","    ax.set_title(f'Class: {au_columns[i]}')\n","\n","# Remove any unused subplots\n","for j in range(num_classes, len(axes)):\n","    axes[j].axis('off')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"XYMcGAtAEmm_","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1743077461109,"user_tz":-180,"elapsed":66667,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"f235765f-eaee-4e73-de8b-caf3cf112a77"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x800 with 16 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Compute metrics for each Action Unit (AU)\n","results = []  # To store metrics for each AU\n","\n","for i in range(test_preds.shape[1]):  # Loop through each AU\n","    true_positive = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 1))  # True positives\n","    false_positive = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 1))  # False positives\n","    false_negative = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 0))  # False negatives\n","    true_negative = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 0))  # True negatives\n","\n","    total_samples = true_positive + false_positive + false_negative + true_negative  # Total samples for the AU\n","\n","    # Calculate Recall (True Positive Rate)\n","    recall = true_positive / (true_positive + false_negative) if (true_positive + false_negative) > 0 else 0\n","\n","    results.append({\n","        \"AU\": au_columns[i],\n","        \"Total Samples\": total_samples,\n","        \"Correctly Predicted\": true_positive + true_negative,\n","        \"Wrong Prediction\": false_positive + false_negative,\n","        \"Recall (%)\": recall * 100  # Recall as a percentage\n","    })\n","\n","# Convert results to a DataFrame for better visualization\n","results_df = pd.DataFrame(results)\n","\n","# Print the results as a table\n","print(results_df)\n","\n","# Optionally, save the results to a CSV file\n","results_df.to_csv(\"AU_metrics_total.csv\", index=False)"],"metadata":{"id":"XMLIR1ejbu2i","executionInfo":{"status":"ok","timestamp":1743073457860,"user_tz":-180,"elapsed":52,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4955c4cf-791e-4c5b-e2e4-59c29bd82b07"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     AU  Total Samples  Correctly Predicted  Wrong Prediction  Recall (%)\n","0   AU1            369                  231               138   52.222222\n","1   AU2            369                  269               100    9.090909\n","2   AU3            369                  294                75   88.271605\n","3   AU4            369                  314                55   77.777778\n","4   AU6            369                  308                61   77.777778\n","5   AU9            369                  314                55   64.814815\n","6  AU12            369                  285                84   39.259259\n","7  AU20            369                  306                63   97.530864\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","\n","# Convert to numpy arrays and apply threshold\n","test_labels_array = np.array(test_labels) > 0.5\n","test_preds_array = np.array(test_preds) > 0.5\n","\n","# Calculate overall F1 score (macro-average across all AUs)\n","overall_f1 = f1_score(test_labels_array, test_preds_array, average='macro')\n","\n","# Display the overall F1 score\n","print(f\"Overall F1 Score (Macro-Average): {overall_f1:.4f}\")"],"metadata":{"id":"sQqbuaCnHhSM","executionInfo":{"status":"ok","timestamp":1743073528432,"user_tz":-180,"elapsed":42,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f3eb0cd3-ad3c-4c1f-c96a-2acf4a44bc72"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Overall F1 Score (Macro-Average): 0.6666\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","\n","# Tüm CSV'leri birleştirin\n","\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('combined_train_data_tif.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"id":"utnDWbvqEmpT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742994932634,"user_tz":-180,"elapsed":31,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"af41e811-157d-42fe-a08c-af7e239f6795"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 2340, Temizlenmiş veri sayısı: 1170\n"]}]},{"cell_type":"code","source":["pred = pd.read_csv(\"all_test_predictions_with_val.csv\")\n","actual = pd.read_csv(\"combined_train_data_tif.csv\")\n","pred = pred.replace({True: 1, False: 0})\n","columns = ['fname'] + [col for col in pred.columns if col != 'fname']\n","pred = pred[columns]\n","pred.to_csv('pred.csv', index=False)"],"metadata":{"id":"-rsLwxVAbo7b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742994932668,"user_tz":-180,"elapsed":30,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"231bae5c-5208-47c5-df4e-17b10482876e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-ce5656259ed3>:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  pred = pred.replace({True: 1, False: 0})\n"]}]},{"cell_type":"code","source":["predictions = pd.read_csv(\"pred.csv\")\n","common_rows = pd.merge(predictions, actual)\n","print(f\"Common rows: {len(common_rows)}\")"],"metadata":{"id":"yaCZ-FoGbo9j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742994932701,"user_tz":-180,"elapsed":29,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"c26b6386-1921-4773-d57c-5e912ce3d5a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Common rows: 99\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","# Tüm CSV'leri birleştirin\n","\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('combined_train_data_tif.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AKd_hbLQEuKg","executionInfo":{"status":"ok","timestamp":1742986229781,"user_tz":-180,"elapsed":52,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"b09171ce-24d8-4b8e-d70c-d75329bda848"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 1170, Temizlenmiş veri sayısı: 1170\n"]}]},{"cell_type":"code","source":["final_predictions.to_csv('/content/drive/My Drive/TIF/all_test_predictions_with_val.csv', index=False)\n"],"metadata":{"id":"SQBgQQJdkers"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","import os\n","\n","# Google Drive'ı bağlayın\n","drive.mount('/content/drive')\n","\n","# Fotoğrafları saymak istediğiniz klasör yolu\n","folder_path = 'drive/My Drive/TIF/CroppedFromPhotos/TIF_DB_Augmented'  # Kendi klasör yolunuzu yazın\n","\n","# Desteklenen resim formatları\n","image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff']\n","\n","# Klasördeki resimleri say\n","image_count = 0\n","for root, dirs, files in os.walk(folder_path):\n","    for file in files:\n","        if any(file.lower().endswith(ext) for ext in image_extensions):\n","            image_count += 1\n","\n","print(f\"Klasör ve alt klasörlerde toplam {image_count} resim dosyası bulundu.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"55ChCVtfgXt-","executionInfo":{"status":"ok","timestamp":1742986471658,"user_tz":-180,"elapsed":2063,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"20f6bd05-b79f-47e0-c1e9-caf53e1742bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Klasör ve alt klasörlerde toplam 1179 resim dosyası bulundu.\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# CSV dosyasını oku\n","df = pd.read_csv(\"/content/drive/My Drive/TIF/all_test_predictions_with_val.csv\")  # CSV dosyanızın adını yazın\n","\n","# AU sütunlarını belirle\n","au_columns = ['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']\n","\n","# True/False değerlerini 1/0'a dönüştür\n","for col in au_columns:\n","    df[col] = df[col].astype(int)  # True->1, False->0'a dönüşür\n","\n","# Değiştirilmiş veriyi yeni bir CSV dosyasına kaydet\n","df.to_csv('yeni_dosya_adı.csv', index=False)\n","\n","print(\"Dönüştürme tamamlandı. Yeni dosya oluşturuldu.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X8ZIcDLvFuAl","executionInfo":{"status":"ok","timestamp":1742986893715,"user_tz":-180,"elapsed":25,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"243cde05-2c6a-4d32-aa37-8eb6a5a7f806"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dönüştürme tamamlandı. Yeni dosya oluşturuldu.\n"]}]},{"cell_type":"code","source":["df = pd.read_csv('yeni_dosya_adı.csv')\n"],"metadata":{"id":"Tdt8fGMWHKDu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["1016+1106+1178"],"metadata":{"id":"D7W-cxrjHd-g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df[['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']].sum())  # Pozitif örnek sayılarını gösterir"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6VPHxnKaHeAu","executionInfo":{"status":"ok","timestamp":1742989389730,"user_tz":-180,"elapsed":5,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"6b95f6eb-6ecc-45da-d5e4-86e03b0dcff1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["AU1     621\n","AU2     174\n","AU3     592\n","AU4     429\n","AU6     809\n","AU9     244\n","AU12    378\n","AU20    584\n","dtype: int64\n"]}]},{"cell_type":"code","source":["621/1170\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c50FOhzZHeCx","executionInfo":{"status":"ok","timestamp":1742987176749,"user_tz":-180,"elapsed":7,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"a4248876-1fcd-4be5-b796-141eb963afb3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5307692307692308"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df['AU2'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"xwSJCIaaLxf9","executionInfo":{"status":"ok","timestamp":1742988165908,"user_tz":-180,"elapsed":12,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"9fcd105c-1214-487a-f0fd-b30a1c0dabf3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["AU2\n","0    996\n","1    174\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>AU2</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>996</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>174</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["acsv_files = [\n","    'drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","bcsv_files = [\n","    'drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]"],"metadata":{"id":"Ec4FKBEXWFJM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train dosyalarındaki toplam satır sayısı\n","train_row_counts = []\n","for csv_file in acsv_files:\n","    df = pd.read_csv(csv_file)\n","    train_row_counts.append(len(df))\n","    print(f\"{csv_file}: {len(df)} satır\")\n","\n","total_train_rows = sum(train_row_counts)\n","print(f\"\\nToplam train satır sayısı: {total_train_rows}\")\n","\n","# Test dosyalarındaki toplam satır sayısı\n","test_row_counts = []\n","for csv_file in bcsv_files:\n","    df = pd.read_csv(csv_file)\n","    test_row_counts.append(len(df))\n","    print(f\"{csv_file}: {len(df)} satır\")\n","\n","total_test_rows = sum(test_row_counts)\n","print(f\"\\nToplam test satır sayısı: {total_test_rows}\")\n","\n","# Tüm veri setindeki toplam satır sayısı\n","print(f\"\\nTüm veri setindeki toplam satır sayısı: {total_train_rows + total_test_rows}\")"],"metadata":{"id":"921Rs2pFXWWY","executionInfo":{"status":"ok","timestamp":1742992028696,"user_tz":-180,"elapsed":67,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"ff1ff57b-9855-4f2b-dc9a-d004cb8873e1","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_0.csv: 774 satır\n","drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_1.csv: 783 satır\n","drive/My Drive/TIF/train/TIF_AUG_AU_SI_ver1_fold_2.csv: 801 satır\n","\n","Toplam train satır sayısı: 2358\n","drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_0.csv: 405 satır\n","drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_1.csv: 396 satır\n","drive/My Drive/TIF/val/TIF_AUG_AU_SI_ver1_fold_2.csv: 378 satır\n","\n","Toplam test satır sayısı: 1179\n","\n","Tüm veri setindeki toplam satır sayısı: 3537\n"]}]},{"cell_type":"code","source":["801+378"],"metadata":{"id":"hokO-_aSZS4T","executionInfo":{"status":"ok","timestamp":1742991783885,"user_tz":-180,"elapsed":44,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"9fc272f9-f23c-4f9a-ca0e-4ba07f582dad","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1179"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":[],"metadata":{"id":"nippnuQeZz8y"},"execution_count":null,"outputs":[]}]}
