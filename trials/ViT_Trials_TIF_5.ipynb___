{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1VN20JTr6VN3sFTy8LcodWdwCRNsDmbwG","timestamp":1736545982113},{"file_id":"1fwY7bWmE1J1ku19jcDf6SnRH4cRdIsph","timestamp":1736532704848},{"file_id":"1yvhzTmLnQnQMbpk1sLWg-rMmP7h_vETp","timestamp":1735912451525}],"authorship_tag":"ABX9TyNqu94i3im6q3R5vG+qlklV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"32d20e096cc74fbcbf6faa0a31c611d5":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_94dda680435144ef9b00a2a50fc9843d","IPY_MODEL_afc88a2ed0b9437ebc58f8a8fb56ad2e","IPY_MODEL_84b08292117a4bbdbca3991cb62f0f4a"],"layout":"IPY_MODEL_6927e7cd535d4c6ca5892c6db8bc55f0"}},"94dda680435144ef9b00a2a50fc9843d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f5da4dff3fcb4a5fa88ac1129005b205","placeholder":"​","style":"IPY_MODEL_53345071deeb406cb3ac5cdefa33ee68","value":"model.safetensors: 100%"}},"afc88a2ed0b9437ebc58f8a8fb56ad2e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_fd1518248ee1422f900ef8ac5f3c623b","max":88216496,"min":0,"orientation":"horizontal","style":"IPY_MODEL_6bf1586dc0204cd8843a7386f09f05c2","value":88216496}},"84b08292117a4bbdbca3991cb62f0f4a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2c3d2b324d1844f7bd1bcf61a59695a2","placeholder":"​","style":"IPY_MODEL_7ceacb23c45f48df8379cf6ec32efacd","value":" 88.2M/88.2M [00:01&lt;00:00, 93.8MB/s]"}},"6927e7cd535d4c6ca5892c6db8bc55f0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f5da4dff3fcb4a5fa88ac1129005b205":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"53345071deeb406cb3ac5cdefa33ee68":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"fd1518248ee1422f900ef8ac5f3c623b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6bf1586dc0204cd8843a7386f09f05c2":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"2c3d2b324d1844f7bd1bcf61a59695a2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7ceacb23c45f48df8379cf6ec32efacd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"id":"Cmeft3V9EmQk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736571113503,"user_tz":-180,"elapsed":18251,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"442a673d-a911-4018-9a66-42e0662745b6","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, Dataset, random_split\n","from torchvision import transforms\n","import pandas as pd\n","from PIL import Image\n","from sklearn.metrics import f1_score, confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","from timm import create_model\n","\n","\n","# Define the dataset class\n","class AUDataset(Dataset):\n","    def __init__(self, csv_file, image_dir, transform=None):\n","        self.data = pd.read_csv(csv_file)\n","        self.image_dir = image_dir\n","        self.transform = transform\n","        self.data['fname'] = self.data['fname'].astype(str)\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        img_name = os.path.join(self.image_dir, self.data.iloc[idx]['fname'])\n","        image = Image.open(img_name).convert(\"RGB\")\n","        labels = torch.tensor(self.data.iloc[idx, 3:].values.astype('float32'))  # Assuming label columns start from index 1\n","\n","        if self.transform:\n","            image = self.transform(image)\n","\n","        return image, labels\n","\n","\n","# Define the model using Vision Transformer (DeiT)\n","class AUModel(nn.Module):\n","    def __init__(self, num_aus):\n","        super(AUModel, self).__init__()\n","        self.base_model = create_model('deit_small_patch16_224', pretrained=True)\n","        self.base_model.head = nn.Linear(self.base_model.head.in_features, num_aus)\n","\n","    def forward(self, x):\n","        return self.base_model(x)\n","\n","\n","# Training function\n","def train_model(model, train_loader, val_loader, test_loader, optimizer, criterion, num_epochs=5):\n","    best_val_f1 = 0.0\n","    best_model_state = None\n","\n","    for epoch in range(num_epochs):\n","        # Training phase\n","        model.train()\n","        train_loss, train_preds, train_labels = 0, [], []\n","        for inputs, labels in train_loader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","\n","            train_loss += loss.item()\n","            train_preds.extend(torch.sigmoid(outputs).cpu().detach().numpy() > 0.5)\n","            train_labels.extend(labels.cpu().numpy())\n","\n","        train_f1 = f1_score(train_labels, train_preds, average='macro')\n","\n","        # Validation phase\n","        model.eval()\n","        val_loss, val_preds, val_labels = 0, [], []\n","        with torch.no_grad():\n","            for inputs, labels in val_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                loss = criterion(outputs, labels)\n","                val_loss += loss.item()\n","                val_preds.extend(torch.sigmoid(outputs).cpu().numpy() > 0.5)\n","                val_labels.extend(labels.cpu().numpy())\n","\n","        val_f1 = f1_score(val_labels, val_preds, average='macro')\n","\n","        # Test phase\n","        test_preds, test_labels = [], []\n","        with torch.no_grad():\n","            for inputs, labels in test_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                test_preds.extend(torch.sigmoid(outputs).cpu().numpy() > 0.5)\n","                test_labels.extend(labels.cpu().numpy())\n","\n","        test_f1 = f1_score(test_labels, test_preds, average='macro')\n","\n","        print(f\"Epoch {epoch+1}/{num_epochs}, Train F1: {train_f1:.4f}, Val F1: {val_f1:.4f}, Test F1: {test_f1:.4f}\")\n","\n","        # Save best model based on validation F1 score\n","        if val_f1 > best_val_f1:\n","            best_val_f1 = val_f1\n","            best_model_state = model.state_dict()\n","\n","    model.load_state_dict(best_model_state)\n","    return model\n","\n","\n","# Confusion matrix display function\n","def plot_confusion_matrix(true_labels, predictions, classes):\n","    cm = confusion_matrix(true_labels, predictions)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","    disp.plot(cmap=plt.cm.Blues)\n","    plt.show()\n","\n","\n","# File paths\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","test_csv_files = [\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","image_dir = 'drive/My Drive/TIF/CroppedFromPhotos/TIF_DB_Augmented'\n","\n","# Define Action Unit columns\n","au_columns = ['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']\n","num_aus = len(au_columns)\n","\n","# Data transformations\n","transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","])\n","\n","# Loss function and device\n","criterion = nn.BCEWithLogitsLoss()\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Initialize model\n","best_model = None\n","all_predictions = []\n","\n","# Iterate through each train-test pair\n","for train_csv, test_csv in zip(train_csv_files, test_csv_files):\n","    # Create datasets\n","    full_train_dataset = AUDataset(train_csv, image_dir, transform=transform)\n","    test_dataset = AUDataset(test_csv, image_dir, transform=transform)\n","\n","    # Split train dataset into train and validation sets\n","    train_size = int(0.8 * len(full_train_dataset))\n","    val_size = len(full_train_dataset) - train_size\n","    train_dataset, val_dataset = random_split(full_train_dataset, [train_size, val_size])\n","\n","    # Create data loaders\n","    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","    val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n","    test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n","\n","    # Initialize the Vision Transformer model\n","    model = AUModel(num_aus).to(device)\n","    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","\n","    # Train the model\n","    model = train_model(model, train_loader, val_loader, test_loader, optimizer, criterion, num_epochs=10)\n","\n","    # Evaluate on the test dataset\n","    test_preds, test_labels = [], []\n","    with torch.no_grad():\n","        for inputs, labels in test_loader:\n","            inputs = inputs.to(device)\n","            outputs = torch.sigmoid(model(inputs))\n","            test_preds.extend(outputs.cpu().numpy() > 0.5)\n","            test_labels.extend(labels.cpu().numpy())\n","\n","    # Save predictions\n","    fold_predictions = pd.DataFrame(test_preds, columns=au_columns)\n","    fold_predictions['fname'] = test_dataset.data['fname'].iloc[:len(test_preds)].values\n","    all_predictions.append(fold_predictions)\n","\n","\n","# Combine and save all predictions\n","final_predictions = pd.concat(all_predictions, ignore_index=True)\n","final_predictions.to_csv('all_test_predictions_with_val.csv', index=False)\n","\n","print(\"Training complete. Predictions saved to all_test_predictions_with_val_5.csv\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":744,"referenced_widgets":["32d20e096cc74fbcbf6faa0a31c611d5","94dda680435144ef9b00a2a50fc9843d","afc88a2ed0b9437ebc58f8a8fb56ad2e","84b08292117a4bbdbca3991cb62f0f4a","6927e7cd535d4c6ca5892c6db8bc55f0","f5da4dff3fcb4a5fa88ac1129005b205","53345071deeb406cb3ac5cdefa33ee68","fd1518248ee1422f900ef8ac5f3c623b","6bf1586dc0204cd8843a7386f09f05c2","2c3d2b324d1844f7bd1bcf61a59695a2","7ceacb23c45f48df8379cf6ec32efacd"]},"outputId":"b2ff0098-70b0-4f7f-d0cb-ea4b8eb4fb20","id":"jS0-6FCzsTk6","executionInfo":{"status":"ok","timestamp":1736559952415,"user_tz":-180,"elapsed":13910783,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/88.2M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"32d20e096cc74fbcbf6faa0a31c611d5"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Epoch 1/10, Train F1: 0.4870, Val F1: 0.6752, Test F1: 0.5488\n","Epoch 2/10, Train F1: 0.7953, Val F1: 0.8217, Test F1: 0.5857\n","Epoch 3/10, Train F1: 0.9353, Val F1: 0.9442, Test F1: 0.6082\n","Epoch 4/10, Train F1: 0.9943, Val F1: 0.9636, Test F1: 0.5982\n","Epoch 5/10, Train F1: 0.9987, Val F1: 0.9792, Test F1: 0.5975\n","Epoch 6/10, Train F1: 0.9996, Val F1: 0.9758, Test F1: 0.6092\n","Epoch 7/10, Train F1: 1.0000, Val F1: 0.9739, Test F1: 0.6089\n","Epoch 8/10, Train F1: 1.0000, Val F1: 0.9778, Test F1: 0.6163\n","Epoch 9/10, Train F1: 1.0000, Val F1: 0.9817, Test F1: 0.6167\n","Epoch 10/10, Train F1: 1.0000, Val F1: 0.9806, Test F1: 0.6165\n","Epoch 1/10, Train F1: 0.4991, Val F1: 0.6912, Test F1: 0.5924\n","Epoch 2/10, Train F1: 0.7692, Val F1: 0.8491, Test F1: 0.6095\n","Epoch 3/10, Train F1: 0.9332, Val F1: 0.9453, Test F1: 0.6296\n","Epoch 4/10, Train F1: 0.9889, Val F1: 0.9832, Test F1: 0.6256\n","Epoch 5/10, Train F1: 0.9991, Val F1: 0.9884, Test F1: 0.6151\n","Epoch 6/10, Train F1: 0.9998, Val F1: 0.9881, Test F1: 0.5894\n","Epoch 7/10, Train F1: 1.0000, Val F1: 0.9916, Test F1: 0.6412\n","Epoch 8/10, Train F1: 1.0000, Val F1: 0.9897, Test F1: 0.6360\n","Epoch 9/10, Train F1: 1.0000, Val F1: 0.9897, Test F1: 0.6393\n","Epoch 10/10, Train F1: 1.0000, Val F1: 0.9898, Test F1: 0.6268\n","Epoch 1/10, Train F1: 0.5502, Val F1: 0.6492, Test F1: 0.5344\n","Epoch 2/10, Train F1: 0.8780, Val F1: 0.8943, Test F1: 0.5980\n","Epoch 3/10, Train F1: 0.9817, Val F1: 0.9496, Test F1: 0.6395\n","Epoch 4/10, Train F1: 0.9984, Val F1: 0.9830, Test F1: 0.6461\n","Epoch 5/10, Train F1: 1.0000, Val F1: 0.9821, Test F1: 0.6341\n","Epoch 6/10, Train F1: 1.0000, Val F1: 0.9826, Test F1: 0.6442\n","Epoch 7/10, Train F1: 1.0000, Val F1: 0.9851, Test F1: 0.6365\n","Epoch 8/10, Train F1: 1.0000, Val F1: 0.9828, Test F1: 0.6380\n","Epoch 9/10, Train F1: 1.0000, Val F1: 0.9830, Test F1: 0.6384\n","Epoch 10/10, Train F1: 1.0000, Val F1: 0.9845, Test F1: 0.6354\n","Training complete. Predictions saved to all_test_predictions_with_val_5.csv\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","import torch\n","import numpy as np\n","\n","# Confusion matrix display function for subplot\n","def plot_confusion_matrix_subplot(true_labels, predictions, classes, ax):\n","    cm = confusion_matrix(true_labels, predictions)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","    disp.plot(cmap=plt.cm.Blues, ax=ax)\n","    ax.set_title(f'Confusion Matrix')\n","\n","# Test phase to collect predictions and true labels\n","test_preds, test_labels = [], []\n","model.eval()  # Set the model to evaluation mode\n","with torch.no_grad():\n","    for inputs, labels in test_loader:\n","        inputs = inputs.to(device)\n","        outputs = torch.sigmoid(model(inputs))  # Sigmoid output for multi-label classification\n","        preds = (outputs > 0.5).cpu().numpy()  # Apply threshold of 0.5 for binary classification\n","\n","        # Collect predictions and true labels\n","        test_preds.extend(preds)\n","        test_labels.extend(labels.cpu().numpy())\n","\n","# Convert to numpy arrays for sklearn compatibility\n","test_preds = np.array(test_preds)\n","test_labels = np.array(test_labels)\n","\n","# Set up subplot grid (4 columns)\n","num_classes = test_preds.shape[1]\n","ncols = 4\n","nrows = (num_classes + ncols - 1) // ncols  # Calculate number of rows needed\n","\n","fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(16, nrows * 4))\n","axes = axes.flatten()  # Flatten the axes array for easier indexing\n","\n","# Plot confusion matrices in subplots\n","for i in range(num_classes):\n","    ax = axes[i]\n","    plot_confusion_matrix_subplot(test_labels[:, i], test_preds[:, i], classes=[0, 1], ax=ax)\n","\n","    # Adjust titles for each subplot\n","    ax.set_title(f'Class: {au_columns[i]}')\n","\n","# Remove any unused subplots\n","for j in range(num_classes, len(axes)):\n","    axes[j].axis('off')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"XYMcGAtAEmm_","colab":{"base_uri":"https://localhost:8080/","height":219},"executionInfo":{"status":"error","timestamp":1736571073766,"user_tz":-180,"elapsed":20977,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"68347a8e-6cf6-4693-808b-ebe122c4994c"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'model' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-84a6ba077fdf>\u001b[0m in \u001b[0;36m<cell line: 15>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Test phase to collect predictions and true labels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mtest_preds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Set the model to evaluation mode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtest_loader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Compute metrics for each Action Unit (AU)\n","results = []  # To store metrics for each AU\n","\n","for i in range(test_preds.shape[1]):  # Loop through each AU\n","    true_positive = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 1))  # True positives\n","    false_positive = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 1))  # False positives\n","    false_negative = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 0))  # False negatives\n","    true_negative = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 0))  # True negatives\n","\n","    total_samples = true_positive + false_positive + false_negative + true_negative  # Total samples for the AU\n","\n","    results.append({\n","        \"AU\": au_columns[i],\n","        \"Total Samples\": total_samples,\n","        \"Correctly Predicted\": true_positive + true_negative,\n","        \"False Positives\": false_positive,\n","        \"False Negatives\": false_negative,\n","    })\n","\n","# Convert results to a DataFrame for better visualization\n","results_df = pd.DataFrame(results)\n","\n","# Print the results as a table\n","print(results_df)\n","\n","# Optionally, save the results to a CSV file\n","results_df.to_csv(\"AU_metrics_total.csv\", index=False)\n"],"metadata":{"id":"XMLIR1ejbu2i","executionInfo":{"status":"aborted","timestamp":1736571073767,"user_tz":-180,"elapsed":4,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","\n","# Flatten arrays for global metrics\n","flat_true_labels = test_labels.ravel()\n","flat_pred_labels = test_preds.ravel()\n","\n","# Calculate overall F1 score (macro-average across all AUs)\n","overall_f1 = f1_score(flat_true_labels, flat_pred_labels, average='macro')\n","\n","# Display the overall F1 score\n","print(f\"Overall F1 Score (Macro-Average): {overall_f1:.4f}\")\n"],"metadata":{"id":"sQqbuaCnHhSM","executionInfo":{"status":"aborted","timestamp":1736571073767,"user_tz":-180,"elapsed":4,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","\n","# Tüm CSV'leri birleştirin\n","\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('combined_train_data_tif.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"id":"utnDWbvqEmpT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736571122666,"user_tz":-180,"elapsed":1201,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"205b7233-4765-42ec-8fd1-958d2032eed7"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 2340, Temizlenmiş veri sayısı: 1170\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","pred = pd.read_csv(\"all_test_predictions_with_val.csv\")\n","actual = pd.read_csv(\"combined_train_data_tif.csv\")\n","pred = pred.replace({True: 1, False: 0})\n","columns = ['fname'] + [col for col in pred.columns if col != 'fname']\n","pred = pred[columns]\n","pred.to_csv('pred.csv', index=False)"],"metadata":{"id":"-rsLwxVAbo7b","colab":{"base_uri":"https://localhost:8080/","height":371},"executionInfo":{"status":"error","timestamp":1736572598853,"user_tz":-180,"elapsed":2697,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"ecec0c3c-83fc-4739-9fd6-6af73630de9c"},"execution_count":3,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'all_test_predictions_with_val.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-9f401ef9b86a>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"all_test_predictions_with_val.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mactual\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"combined_train_data_tif.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'all_test_predictions_with_val.csv'"]}]},{"cell_type":"code","source":["predictions = pd.read_csv(\"pred.csv\")\n","common_rows = pd.merge(predictions, actual)\n","print(f\"Common rows: {len(common_rows)}\")"],"metadata":{"id":"yaCZ-FoGbo9j","colab":{"base_uri":"https://localhost:8080/","height":335},"executionInfo":{"status":"error","timestamp":1736571122667,"user_tz":-180,"elapsed":8,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"c9068211-5f49-4dcc-c80d-e4fd24189762"},"execution_count":7,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'pred.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-8fb2af2910b6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"pred.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mcommon_rows\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactual\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Common rows: {len(common_rows)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'pred.csv'"]}]},{"cell_type":"code","source":[],"metadata":{"id":"SQBgQQJdkers","executionInfo":{"status":"aborted","timestamp":1736571073768,"user_tz":-180,"elapsed":4,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":null,"outputs":[]}]}
