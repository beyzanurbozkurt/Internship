{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"16ONbhCpBIugEus-0NDuEmNS9nSxDN36F","timestamp":1742987335464},{"file_id":"1AloRl52cNazasV63_aSOX8pyWzYBL42y","timestamp":1742976614638},{"file_id":"1Gz_dN7QsUktnnLowFZPOeJQuOHcQJxVl","timestamp":1736572404570},{"file_id":"1VN20JTr6VN3sFTy8LcodWdwCRNsDmbwG","timestamp":1736545982113},{"file_id":"1fwY7bWmE1J1ku19jcDf6SnRH4cRdIsph","timestamp":1736532704848},{"file_id":"1yvhzTmLnQnQMbpk1sLWg-rMmP7h_vETp","timestamp":1735912451525}],"authorship_tag":"ABX9TyNrBuvSQaojxPNZiHXtieO0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"76ae56f8b6044361a2f8e1b039fba902":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_30a57433b6ae4186a733c00bfc090962","IPY_MODEL_914fd3afd6ca4a5d9bbdb2d837a8715e","IPY_MODEL_46fd9eea04644a3b815cfb3d5cedbc3a"],"layout":"IPY_MODEL_f7bd88c172c74f7e9312693986b3feec"}},"30a57433b6ae4186a733c00bfc090962":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fff1486e954a49439061e553c9870c92","placeholder":"​","style":"IPY_MODEL_179050b459934195abff71ee6896e963","value":"model.safetensors: 100%"}},"914fd3afd6ca4a5d9bbdb2d837a8715e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_c944845e1f9c40c5ba66af17c57f08c4","max":88216496,"min":0,"orientation":"horizontal","style":"IPY_MODEL_29a5649491f542f393ec5816a52b9a56","value":88216496}},"46fd9eea04644a3b815cfb3d5cedbc3a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_00acf469b21e445c9dafbdb0dd4df9c3","placeholder":"​","style":"IPY_MODEL_3a1fcfffe6bd4e7a9989a9b65d8add75","value":" 88.2M/88.2M [00:00&lt;00:00, 128MB/s]"}},"f7bd88c172c74f7e9312693986b3feec":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fff1486e954a49439061e553c9870c92":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"179050b459934195abff71ee6896e963":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c944845e1f9c40c5ba66af17c57f08c4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"29a5649491f542f393ec5816a52b9a56":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"00acf469b21e445c9dafbdb0dd4df9c3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3a1fcfffe6bd4e7a9989a9b65d8add75":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Cmeft3V9EmQk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742976671932,"user_tz":-180,"elapsed":21771,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"94713120-d6a6-49ab-ef46-ef86ccf49265"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, Dataset, random_split\n","from torchvision import transforms\n","import pandas as pd\n","from PIL import Image\n","from sklearn.metrics import f1_score, confusion_matrix, ConfusionMatrixDisplay, precision_recall_curve\n","import matplotlib.pyplot as plt\n","from timm import create_model\n","import numpy as np\n","\n","# Define the dataset class\n","class AUDataset(Dataset):\n","    def __init__(self, csv_file, image_dir, transform=None):\n","        self.data = pd.read_csv(csv_file)\n","        self.image_dir = image_dir\n","        self.transform = transform\n","        self.data['fname'] = self.data['fname'].astype(str)\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        img_name = os.path.join(self.image_dir, self.data.iloc[idx]['fname'])\n","        image = Image.open(img_name).convert(\"RGB\")\n","        labels = torch.tensor(self.data.iloc[idx, 3:].values.astype('float32'))  # Assuming label columns start from index 1\n","\n","        if self.transform:\n","            image = self.transform(image)\n","\n","        return image, labels\n","\n","# Define the model using Vision Transformer (DeiT) with dropout\n","class AUModel(nn.Module):\n","    def __init__(self, num_aus, dropout_rate=0.5):\n","        super(AUModel, self).__init__()\n","        self.base_model = create_model('deit_small_patch16_224', pretrained=True)\n","\n","        # Add dropout before the final layer\n","        self.dropout = nn.Dropout(dropout_rate)\n","        self.base_model.head = nn.Linear(self.base_model.head.in_features, num_aus)\n","\n","    def forward(self, x):\n","        x = self.base_model.forward_features(x)\n","        x = self.base_model.forward_head(x, pre_logits=True)\n","        x = self.dropout(x)\n","        x = self.base_model.head(x)\n","        return x\n","\n","# Training function\n","def train_model(model, train_loader, val_loader, test_loader, optimizer, criterion, num_epochs=6):  # Changed to 6 epochs\n","    best_val_f1 = 0.0\n","    best_model_state = None\n","\n","    for epoch in range(num_epochs):\n","        # Training phase\n","        model.train()\n","        train_loss, train_preds, train_labels = 0, [], []\n","        for inputs, labels in train_loader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","\n","            train_loss += loss.item()\n","            train_preds.extend(torch.sigmoid(outputs).cpu().detach().numpy())\n","            train_labels.extend(labels.cpu().numpy())\n","\n","        train_f1 = f1_score(np.array(train_labels) > 0.5, np.array(train_preds) > 0.5, average='macro')\n","\n","        # Validation phase\n","        model.eval()\n","        val_loss, val_preds, val_labels = 0, [], []\n","        with torch.no_grad():\n","            for inputs, labels in val_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                loss = criterion(outputs, labels)\n","                val_loss += loss.item()\n","                val_preds.extend(torch.sigmoid(outputs).cpu().numpy())\n","                val_labels.extend(labels.cpu().numpy())\n","\n","        val_f1 = f1_score(np.array(val_labels) > 0.5, np.array(val_preds) > 0.5, average='macro')\n","\n","        # Test phase\n","        test_preds, test_labels = [], []\n","        with torch.no_grad():\n","            for inputs, labels in test_loader:\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                test_preds.extend(torch.sigmoid(outputs).cpu().numpy())\n","                test_labels.extend(labels.cpu().numpy())\n","\n","        test_f1 = f1_score(np.array(test_labels) > 0.5, np.array(test_preds) > 0.5, average='macro')\n","\n","        print(f\"Epoch {epoch+1}/{num_epochs}, Train F1: {train_f1:.4f}, Val F1: {val_f1:.4f}, Test F1: {test_f1:.4f}\")\n","\n","        # Save best model based on validation F1 score\n","        if val_f1 > best_val_f1:\n","            best_val_f1 = val_f1\n","            best_model_state = model.state_dict()\n","\n","    model.load_state_dict(best_model_state)\n","    return model\n","\n","# Confusion matrix display function\n","def plot_confusion_matrix(true_labels, predictions, classes):\n","    cm = confusion_matrix(true_labels, predictions)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","    disp.plot(cmap=plt.cm.Blues)\n","    plt.show()\n","\n","# File paths\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","test_csv_files = [\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","image_dir = 'drive/My Drive/TIF/CroppedFromPhotos/TIF_DB_Augmented'\n","\n","# Define Action Unit columns\n","au_columns = ['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']\n","num_aus = len(au_columns)\n","\n","# Data transformations\n","transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","])\n","\n","# Loss function and device\n","criterion = nn.BCEWithLogitsLoss()\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Initialize model\n","best_model = None\n","all_predictions = []\n","\n","# Iterate through each train-test pair\n","for train_csv, test_csv in zip(train_csv_files, test_csv_files):\n","    # Create datasets\n","    full_train_dataset = AUDataset(train_csv, image_dir, transform=transform)\n","    test_dataset = AUDataset(test_csv, image_dir, transform=transform)\n","\n","    # Split train dataset into train and validation sets\n","    train_size = int(0.8 * len(full_train_dataset))\n","    val_size = len(full_train_dataset) - train_size\n","    train_dataset, val_dataset = random_split(full_train_dataset, [train_size, val_size])\n","\n","    # Create data loaders\n","    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","    val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n","    test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n","\n","    # Initialize the Vision Transformer model with dropout\n","    model = AUModel(num_aus, dropout_rate=0.5).to(device)  # Added dropout with rate 0.5\n","    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","\n","    # Train the model for 6 epochs\n","    model = train_model(model, train_loader, val_loader, test_loader, optimizer, criterion, num_epochs=6)\n","\n","    # Evaluate on the test dataset\n","    test_preds, test_labels = [], []\n","    with torch.no_grad():\n","        for inputs, labels in test_loader:\n","            inputs = inputs.to(device)\n","            outputs = torch.sigmoid(model(inputs))\n","            test_preds.extend(outputs.cpu().numpy() > 0.5)\n","            test_labels.extend(labels.cpu().numpy())\n","\n","    # Save predictions\n","    fold_predictions = pd.DataFrame(test_preds, columns=au_columns)\n","    fold_predictions['fname'] = test_dataset.data['fname'].iloc[:len(test_preds)].values\n","    all_predictions.append(fold_predictions)\n","\n","# Combine and save all predictions\n","final_predictions = pd.concat(all_predictions, ignore_index=True)\n","final_predictions.to_csv('all_test_predictions_with_val.csv', index=False)\n","\n","print(\"Training complete. Predictions saved to all_test_predictions_with_val_5.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":483,"referenced_widgets":["76ae56f8b6044361a2f8e1b039fba902","30a57433b6ae4186a733c00bfc090962","914fd3afd6ca4a5d9bbdb2d837a8715e","46fd9eea04644a3b815cfb3d5cedbc3a","f7bd88c172c74f7e9312693986b3feec","fff1486e954a49439061e553c9870c92","179050b459934195abff71ee6896e963","c944845e1f9c40c5ba66af17c57f08c4","29a5649491f542f393ec5816a52b9a56","00acf469b21e445c9dafbdb0dd4df9c3","3a1fcfffe6bd4e7a9989a9b65d8add75"]},"outputId":"c06eff9b-43bc-4116-e188-c0b45eb984f9","id":"jS0-6FCzsTk6","executionInfo":{"status":"ok","timestamp":1742985789843,"user_tz":-180,"elapsed":9112897,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/88.2M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"76ae56f8b6044361a2f8e1b039fba902"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Epoch 1/6, Train F1: 0.4254, Val F1: 0.6696, Test F1: 0.5944\n","Epoch 2/6, Train F1: 0.6842, Val F1: 0.7191, Test F1: 0.5591\n","Epoch 3/6, Train F1: 0.7787, Val F1: 0.8288, Test F1: 0.6048\n","Epoch 4/6, Train F1: 0.8763, Val F1: 0.9079, Test F1: 0.5761\n","Epoch 5/6, Train F1: 0.9463, Val F1: 0.9490, Test F1: 0.6025\n","Epoch 6/6, Train F1: 0.9747, Val F1: 0.9492, Test F1: 0.6100\n","Epoch 1/6, Train F1: 0.4433, Val F1: 0.6071, Test F1: 0.5011\n","Epoch 2/6, Train F1: 0.6427, Val F1: 0.6656, Test F1: 0.5297\n","Epoch 3/6, Train F1: 0.7568, Val F1: 0.8141, Test F1: 0.5450\n","Epoch 4/6, Train F1: 0.8683, Val F1: 0.9055, Test F1: 0.6240\n","Epoch 5/6, Train F1: 0.9349, Val F1: 0.9504, Test F1: 0.6403\n","Epoch 6/6, Train F1: 0.9660, Val F1: 0.9715, Test F1: 0.6688\n","Epoch 1/6, Train F1: 0.3608, Val F1: 0.4042, Test F1: 0.4032\n","Epoch 2/6, Train F1: 0.6186, Val F1: 0.7615, Test F1: 0.6583\n","Epoch 3/6, Train F1: 0.8256, Val F1: 0.8692, Test F1: 0.6550\n","Epoch 4/6, Train F1: 0.9486, Val F1: 0.9375, Test F1: 0.6440\n","Epoch 5/6, Train F1: 0.9885, Val F1: 0.9623, Test F1: 0.6486\n","Epoch 6/6, Train F1: 0.9974, Val F1: 0.9761, Test F1: 0.6506\n","Training complete. Predictions saved to all_test_predictions_with_val_5.csv\n"]}]},{"cell_type":"code","source":["!pip install Pillow"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6Di4dmctFYn_","executionInfo":{"status":"ok","timestamp":1742985793105,"user_tz":-180,"elapsed":3264,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"205c138c-25be-46cf-8846-dc4081505cba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (11.1.0)\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","import torch\n","import numpy as np\n","\n","# Confusion matrix display function for subplot\n","def plot_confusion_matrix_subplot(true_labels, predictions, classes, ax):\n","    cm = confusion_matrix(true_labels, predictions)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n","    disp.plot(cmap=plt.cm.Blues, ax=ax)\n","    ax.set_title(f'Confusion Matrix')\n","\n","# Test phase to collect predictions and true labels\n","test_preds, test_labels = [], []\n","model.eval()  # Set the model to evaluation mode\n","with torch.no_grad():\n","    for inputs, labels in test_loader:\n","        inputs = inputs.to(device)\n","        outputs = torch.sigmoid(model(inputs))  # Sigmoid output for multi-label classification\n","        preds = (outputs > 0.5).cpu().numpy()  # Apply threshold of 0.5 for binary classification\n","\n","        # Collect predictions and true labels\n","        test_preds.extend(preds)\n","        test_labels.extend(labels.cpu().numpy())\n","\n","# Convert to numpy arrays for sklearn compatibility\n","test_preds = np.array(test_preds)\n","test_labels = np.array(test_labels)\n","\n","# Set up subplot grid (4 columns)\n","num_classes = test_preds.shape[1]\n","ncols = 4\n","nrows = (num_classes + ncols - 1) // ncols  # Calculate number of rows needed\n","\n","fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(16, nrows * 4))\n","axes = axes.flatten()  # Flatten the axes array for easier indexing\n","\n","# Plot confusion matrices in subplots\n","for i in range(num_classes):\n","    ax = axes[i]\n","    plot_confusion_matrix_subplot(test_labels[:, i], test_preds[:, i], classes=[0, 1], ax=ax)\n","\n","    # Adjust titles for each subplot\n","    ax.set_title(f'Class: {au_columns[i]}')\n","\n","# Remove any unused subplots\n","for j in range(num_classes, len(axes)):\n","    axes[j].axis('off')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"XYMcGAtAEmm_","colab":{"base_uri":"https://localhost:8080/","height":795},"executionInfo":{"status":"ok","timestamp":1742985866066,"user_tz":-180,"elapsed":73007,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"3ea9c3df-6de0-4ff4-89b1-9cd1493aced4"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x800 with 16 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Compute metrics for each Action Unit (AU)\n","results = []  # To store metrics for each AU\n","\n","for i in range(test_preds.shape[1]):  # Loop through each AU\n","    true_positive = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 1))  # True positives\n","    false_positive = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 1))  # False positives\n","    false_negative = np.sum((test_labels[:, i] == 1) & (test_preds[:, i] == 0))  # False negatives\n","    true_negative = np.sum((test_labels[:, i] == 0) & (test_preds[:, i] == 0))  # True negatives\n","\n","    total_samples = true_positive + false_positive + false_negative + true_negative  # Total samples for the AU\n","\n","    # Calculate Recall (True Positive Rate)\n","    recall = true_positive / (true_positive + false_negative) if (true_positive + false_negative) > 0 else 0\n","\n","    results.append({\n","        \"AU\": au_columns[i],\n","        \"Total Samples\": total_samples,\n","        \"Correctly Predicted\": true_positive + true_negative,\n","        \"Wrong Prediction\": false_positive + false_negative,\n","        \"Recall (%)\": recall * 100  # Recall as a percentage\n","    })\n","\n","# Convert results to a DataFrame for better visualization\n","results_df = pd.DataFrame(results)\n","\n","# Print the results as a table\n","print(results_df)\n","\n","# Optionally, save the results to a CSV file\n","results_df.to_csv(\"AU_metrics_total.csv\", index=False)"],"metadata":{"id":"XMLIR1ejbu2i","executionInfo":{"status":"ok","timestamp":1742985866069,"user_tz":-180,"elapsed":2,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"67040800-d75c-4958-d460-e6e663d0cb47"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     AU  Total Samples  Correctly Predicted  Wrong Prediction  Recall (%)\n","0   AU1            369                  215               154   49.444444\n","1   AU2            369                  270                99    1.010101\n","2   AU3            369                  313                56   87.037037\n","3   AU4            369                  282                87   59.649123\n","4   AU6            369                  323                46   84.814815\n","5   AU9            369                  315                54   62.037037\n","6  AU12            369                  279                90   64.444444\n","7  AU20            369                  306                63   96.913580\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","\n","# Convert to numpy arrays and apply threshold\n","test_labels_array = np.array(test_labels) > 0.5\n","test_preds_array = np.array(test_preds) > 0.5\n","\n","# Calculate overall F1 score (macro-average across all AUs)\n","overall_f1 = f1_score(test_labels_array, test_preds_array, average='macro')\n","\n","# Display the overall F1 score\n","print(f\"Overall F1 Score (Macro-Average): {overall_f1:.4f}\")"],"metadata":{"id":"sQqbuaCnHhSM","executionInfo":{"status":"ok","timestamp":1742986039559,"user_tz":-180,"elapsed":42,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7b7ec10d-c367-4e19-c8ab-1995526240dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Overall F1 Score (Macro-Average): 0.6506\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/train_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","\n","# Tüm CSV'leri birleştirin\n","\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('combined_train_data_tif.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"id":"utnDWbvqEmpT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742985866075,"user_tz":-180,"elapsed":2,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"93fb03b5-83c3-44c7-bc3b-47f277427c15"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 2340, Temizlenmiş veri sayısı: 1170\n"]}]},{"cell_type":"code","source":["pred = pd.read_csv(\"all_test_predictions_with_val.csv\")\n","actual = pd.read_csv(\"combined_train_data_tif.csv\")\n","pred = pred.replace({True: 1, False: 0})\n","columns = ['fname'] + [col for col in pred.columns if col != 'fname']\n","pred = pred[columns]\n","pred.to_csv('pred.csv', index=False)"],"metadata":{"id":"-rsLwxVAbo7b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742985866136,"user_tz":-180,"elapsed":61,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"8e42ac4f-1f91-40c0-ccb3-080ae719673d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-ce5656259ed3>:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  pred = pred.replace({True: 1, False: 0})\n"]}]},{"cell_type":"code","source":["predictions = pd.read_csv(\"pred.csv\")\n","common_rows = pd.merge(predictions, actual)\n","print(f\"Common rows: {len(common_rows)}\")"],"metadata":{"id":"yaCZ-FoGbo9j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742985866138,"user_tz":-180,"elapsed":2,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"13ca97bb-fd3e-41a0-b642-22a9a774311d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Common rows: 194\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Train CSV dosyalarının yollarını listeleyin\n","train_csv_files = [\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_0.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_1.csv',\n","    'drive/My Drive/TIF/val_new/TIF_AUG_AU_SI_ver1_fold_2.csv',\n","]\n","# Tüm CSV'leri birleştirin\n","\n","train_data = pd.concat([pd.read_csv(csv_file) for csv_file in train_csv_files], ignore_index=True)\n","\n","# Duplike satırları kaldırın\n","train_data_cleaned = train_data.drop_duplicates()\n","\n","# Yeni temizlenmiş veriyi kaydedin\n","train_data_cleaned.to_csv('combined_train_data_tif.csv', index=False)\n","\n","print(f\"Orijinal veri sayısı: {len(train_data)}, Temizlenmiş veri sayısı: {len(train_data_cleaned)}\")\n"],"metadata":{"id":"AKd_hbLQEuKg","executionInfo":{"status":"ok","timestamp":1742986229781,"user_tz":-180,"elapsed":52,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"b09171ce-24d8-4b8e-d70c-d75329bda848","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal veri sayısı: 1170, Temizlenmiş veri sayısı: 1170\n"]}]},{"cell_type":"code","source":["final_predictions.to_csv('/content/drive/My Drive/TIF/all_test_predictions_with_val.csv', index=False)\n"],"metadata":{"id":"SQBgQQJdkers"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","import os\n","\n","# Google Drive'ı bağlayın\n","drive.mount('/content/drive')\n","\n","# Fotoğrafları saymak istediğiniz klasör yolu\n","folder_path = 'drive/My Drive/TIF/CroppedFromPhotos/TIF_DB_Augmented'  # Kendi klasör yolunuzu yazın\n","\n","# Desteklenen resim formatları\n","image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff']\n","\n","# Klasördeki resimleri say\n","image_count = 0\n","for root, dirs, files in os.walk(folder_path):\n","    for file in files:\n","        if any(file.lower().endswith(ext) for ext in image_extensions):\n","            image_count += 1\n","\n","print(f\"Klasör ve alt klasörlerde toplam {image_count} resim dosyası bulundu.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"55ChCVtfgXt-","executionInfo":{"status":"ok","timestamp":1742986471658,"user_tz":-180,"elapsed":2063,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"20f6bd05-b79f-47e0-c1e9-caf53e1742bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Klasör ve alt klasörlerde toplam 1179 resim dosyası bulundu.\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# CSV dosyasını oku\n","df = pd.read_csv(\"/content/drive/My Drive/TIF/all_test_predictions_with_val.csv\")  # CSV dosyanızın adını yazın\n","\n","# AU sütunlarını belirle\n","au_columns = ['AU1', 'AU2', 'AU3', 'AU4', 'AU6', 'AU9', 'AU12', 'AU20']\n","\n","# True/False değerlerini 1/0'a dönüştür\n","for col in au_columns:\n","    df[col] = df[col].astype(int)  # True->1, False->0'a dönüşür\n","\n","# Değiştirilmiş veriyi yeni bir CSV dosyasına kaydet\n","df.to_csv('yeni_dosya_adı.csv', index=False)\n","\n","print(\"Dönüştürme tamamlandı. Yeni dosya oluşturuldu.\")"],"metadata":{"id":"X8ZIcDLvFuAl","executionInfo":{"status":"ok","timestamp":1742986893715,"user_tz":-180,"elapsed":25,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"243cde05-2c6a-4d32-aa37-8eb6a5a7f806","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dönüştürme tamamlandı. Yeni dosya oluşturuldu.\n"]}]},{"cell_type":"code","source":["df = pd.read_csv('yeni_dosya_adı.csv')\n"],"metadata":{"id":"Tdt8fGMWHKDu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["1016+1106+1178"],"metadata":{"id":"D7W-cxrjHd-g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df[['AU1', 'AU2']].sum())  # Pozitif örnek sayılarını gösterir"],"metadata":{"id":"6VPHxnKaHeAu","executionInfo":{"status":"ok","timestamp":1742987144228,"user_tz":-180,"elapsed":7,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"d417a77c-4ef8-4491-82b9-fe401a97b944","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["AU1    621\n","AU2    174\n","dtype: int64\n"]}]},{"cell_type":"code","source":["621/1170\n"],"metadata":{"id":"c50FOhzZHeCx","executionInfo":{"status":"ok","timestamp":1742987176749,"user_tz":-180,"elapsed":7,"user":{"displayName":"Beyza Nur Keskin","userId":"15346924660563692244"}},"outputId":"a4248876-1fcd-4be5-b796-141eb963afb3","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5307692307692308"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":[],"metadata":{"id":"WcJ7-BFqIYL5"},"execution_count":null,"outputs":[]}]}